// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingCollectItem newbilling collect item
//
// swagger:model newbillingCollectItem
type NewbillingCollectItem struct {

	// access sys id
	AccessSysID string `json:"access_sys_id,omitempty"`

	// collect item id
	CollectItemID string `json:"collect_item_id,omitempty"`

	// collect time
	// Format: date-time
	CollectTime *strfmt.DateTime `json:"collect_time,omitempty"`

	// create time
	// Format: date-time
	CreateTime *strfmt.DateTime `json:"create_time,omitempty"`

	// duration
	Duration int32 `json:"duration,omitempty"`

	// is calendar
	IsCalendar int32 `json:"is_calendar,omitempty"`

	// job id
	JobID string `json:"job_id,omitempty"`

	// next collect time
	// Format: date-time
	NextCollectTime *strfmt.DateTime `json:"next_collect_time,omitempty"`

	// offset
	Offset int32 `json:"offset,omitempty"`

	// prod id
	ProdID string `json:"prod_id,omitempty"`

	// prod inst id ext
	ProdInstIDExt string `json:"prod_inst_id_ext,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// update time
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this newbilling collect item
func (m *NewbillingCollectItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCollectTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextCollectTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingCollectItem) validateCollectTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CollectTime) { // not required
		return nil
	}

	if err := validate.FormatOf("collect_time", "body", "date-time", m.CollectTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingCollectItem) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingCollectItem) validateNextCollectTime(formats strfmt.Registry) error {
	if swag.IsZero(m.NextCollectTime) { // not required
		return nil
	}

	if err := validate.FormatOf("next_collect_time", "body", "date-time", m.NextCollectTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingCollectItem) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this newbilling collect item based on context it is used
func (m *NewbillingCollectItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingCollectItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingCollectItem) UnmarshalBinary(b []byte) error {
	var res NewbillingCollectItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
