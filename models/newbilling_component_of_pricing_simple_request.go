// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewbillingComponentOfPricingSimpleRequest ComponentOfPricingSimpleRequest
//
// 简单定价转换公式定价规则:
//
// # 时间包公式条件
// 标准定价:
// 1.公式>单价*包月数*属性
// 2.条件> 包月数
// 枚举定价:
// 1.公式>单价*包月数
// 2.条件>属性&&包月数
//
// # 时间量公式条件
// 标准定价:
// 1.公式>单价*小时数*属性
// 2.条件> 无
// 枚举定价:
// 1.公式>单价*小时数
// 2.条件>属性
//
// # 资源包公式条件
// 枚举定价 :
// 1.公式>单价
// 2.条件>计量属性&&有效期
//
// # 资源量公式条件
// 标准定价 :
// 1.公式>单价*计量属性
// 2.条件>无
//
// #  billing mode
// 按 billing mode 来区分，时间包时间量 > 非计量属性，资源包资源量 > 计量属性
//
// # 操作符
// ==, !=, >, >=,&lt, &lt=, in, not in
//
// swagger:model newbillingComponentOfPricingSimpleRequest
type NewbillingComponentOfPricingSimpleRequest struct {

	// 接入系统ID仅super user有效，接入系统管理员/成员会默认用当前登陆的接入系统
	AccessSysID string `json:"access_sys_id,omitempty"`

	// 计费模式 @gotags:valid:"OneOf(package_time,package_resource,usage_resource,usage_time)"
	BillingMode string `json:"billing_mode,omitempty"`

	// 计费项CODE
	CompCode string `json:"comp_code,omitempty"`

	// 计费项目ID
	CompID string `json:"comp_id,omitempty"`

	// 计费项名称，选中的属性名称 @gotags: valid:"Required;MaxSize(30)"
	Name string `json:"name,omitempty"`

	// 计费方案ID @gotags: valid:"Required"
	PlanID string `json:"plan_id,omitempty"`

	// 定价模型 @gotags: valid:"OneOf(standard,enum)"
	PricingMode string `json:"pricing_mode,omitempty"`

	// 产品ID @gotags: valid:"Required"
	ProdID string `json:"prod_id,omitempty"`

	// 资源包类型bill_mode=package_resource 时有效，normal=普通资源包(流量包)，storage=存储包,@gotags:valid:"OneOf(normal,storage)"
	ResourcePkgType string `json:"resource_pkg_type,omitempty"`

	// 策略 @gotags: valid:"Required"
	Strategys []*NewbillingComponentOfPricingSimpleStrategy `json:"strategys"`
}

// Validate validates this newbilling component of pricing simple request
func (m *NewbillingComponentOfPricingSimpleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStrategys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingComponentOfPricingSimpleRequest) validateStrategys(formats strfmt.Registry) error {
	if swag.IsZero(m.Strategys) { // not required
		return nil
	}

	for i := 0; i < len(m.Strategys); i++ {
		if swag.IsZero(m.Strategys[i]) { // not required
			continue
		}

		if m.Strategys[i] != nil {
			if err := m.Strategys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("strategys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this newbilling component of pricing simple request based on the context it is used
func (m *NewbillingComponentOfPricingSimpleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStrategys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingComponentOfPricingSimpleRequest) contextValidateStrategys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Strategys); i++ {

		if m.Strategys[i] != nil {
			if err := m.Strategys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("strategys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingComponentOfPricingSimpleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingComponentOfPricingSimpleRequest) UnmarshalBinary(b []byte) error {
	var res NewbillingComponentOfPricingSimpleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
