// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingStrategy 策略
//
// swagger:model newbillingStrategy
type NewbillingStrategy struct {

	// attributes
	Attributes []*NewbillingAttribute `json:"attributes"`

	// 基础折扣
	BasicDiscount float32 `json:"basic_discount,omitempty"`

	// 计费项ID
	CompID string `json:"comp_id,omitempty"`

	// 费用表达式公式
	CostExpression string `json:"cost_expression,omitempty"`

	// 费用表达式公式
	CostExpression4read string `json:"cost_expression4read,omitempty"`

	// 费用表达式公式计算结果
	CostExpressionResult float32 `json:"cost_expression_result,omitempty"`

	// 费用表达式公式计算结果-最终结果
	CostExpressionResultFinal float32 `json:"cost_expression_result_final,omitempty"`

	// 创建时间
	// Format: date-time
	CreateTime *strfmt.DateTime `json:"create_time,omitempty"`

	// 客户折扣
	CustomerDiscount float32 `json:"customer_discount,omitempty"`

	// 条件表达式,如 flt_YjD7NnZpzQLj && flt_pjGAEq3BjZ8n || flt_RPVnyLNNROmK
	FilterExpression string `json:"filter_expression,omitempty"`

	// 条件表达式1,如 atr_QzDXM0OMj2RB=='AP' && atr_3N7R63DqNGQg==4 || patr_PackageMonth==6
	FilterExpression4code string `json:"filter_expression4code,omitempty"`

	// 条件表达式1,如 区域=='AP' && 内存==4 || 包月数==6
	FilterExpression4read string `json:"filter_expression4read,omitempty"`

	// 条件表达式计算结果
	FilterExpressionResult bool `json:"filter_expression_result,omitempty"`

	// 策略名称
	Name string `json:"name,omitempty"`

	// 产品ID
	ProdID string `json:"prod_id,omitempty"`

	// 策略备注
	Remark string `json:"remark,omitempty"`

	// 策略编码
	StrategyCode string `json:"strategy_code,omitempty"`

	// 策略ID
	StrategyID string `json:"strategy_id,omitempty"`

	// 更新时间
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this newbilling strategy
func (m *NewbillingStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingStrategy) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingStrategy) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingStrategy) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this newbilling strategy based on the context it is used
func (m *NewbillingStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingStrategy) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attributes); i++ {

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingStrategy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingStrategy) UnmarshalBinary(b []byte) error {
	var res NewbillingStrategy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
