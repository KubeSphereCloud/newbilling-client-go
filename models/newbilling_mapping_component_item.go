// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewbillingMappingComponentItem newbilling mapping component item
//
// swagger:model newbillingMappingComponentItem
type NewbillingMappingComponentItem struct {

	// 是否存在关联项
	Associate bool `json:"associate,omitempty"`

	// 关联属性，目前是资源包计费项目有1:1关联属性
	AssociateAttr *NewbillingAttribute `json:"associate_attr,omitempty"`

	// 关联计费项目的详细信息
	AssociateComponent *NewbillingComponent `json:"associate_component,omitempty"`

	// 计费项ID
	CompID string `json:"comp_id,omitempty"`
}

// Validate validates this newbilling mapping component item
func (m *NewbillingMappingComponentItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociateAttr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociateComponent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingMappingComponentItem) validateAssociateAttr(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociateAttr) { // not required
		return nil
	}

	if m.AssociateAttr != nil {
		if err := m.AssociateAttr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associate_attr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associate_attr")
			}
			return err
		}
	}

	return nil
}

func (m *NewbillingMappingComponentItem) validateAssociateComponent(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociateComponent) { // not required
		return nil
	}

	if m.AssociateComponent != nil {
		if err := m.AssociateComponent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associate_component")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associate_component")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this newbilling mapping component item based on the context it is used
func (m *NewbillingMappingComponentItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssociateAttr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociateComponent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingMappingComponentItem) contextValidateAssociateAttr(ctx context.Context, formats strfmt.Registry) error {

	if m.AssociateAttr != nil {
		if err := m.AssociateAttr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associate_attr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associate_attr")
			}
			return err
		}
	}

	return nil
}

func (m *NewbillingMappingComponentItem) contextValidateAssociateComponent(ctx context.Context, formats strfmt.Registry) error {

	if m.AssociateComponent != nil {
		if err := m.AssociateComponent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associate_component")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associate_component")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingMappingComponentItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingMappingComponentItem) UnmarshalBinary(b []byte) error {
	var res NewbillingMappingComponentItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
