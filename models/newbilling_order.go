// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingOrder newbilling order
//
// swagger:model newbillingOrder
type NewbillingOrder struct {

	// access sys id
	AccessSysID string `json:"access_sys_id,omitempty"`

	// amount
	Amount float32 `json:"amount,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`

	// create time
	// Format: date-time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// order id
	OrderID string `json:"order_id,omitempty"`

	// out trade no
	OutTradeNo string `json:"out_trade_no,omitempty"`

	// passback
	Passback string `json:"passback,omitempty"`

	// remark
	Remark string `json:"remark,omitempty"`

	// return url
	ReturnURL string `json:"return_url,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// status time
	// Format: date-time
	StatusTime strfmt.DateTime `json:"status_time,omitempty"`

	// subject
	Subject string `json:"subject,omitempty"`

	// trade no
	TradeNo string `json:"trade_no,omitempty"`

	// update time
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this newbilling order
func (m *NewbillingOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingOrder) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingOrder) validateStatusTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusTime) { // not required
		return nil
	}

	if err := validate.FormatOf("status_time", "body", "date-time", m.StatusTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingOrder) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this newbilling order based on context it is used
func (m *NewbillingOrder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingOrder) UnmarshalBinary(b []byte) error {
	var res NewbillingOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
