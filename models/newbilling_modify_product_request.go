// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingModifyProductRequest 修改产品请求信息
//
// swagger:model newbillingModifyProductRequest
type NewbillingModifyProductRequest struct {

	// 接入系统ID仅super user有效，接入系统管理员/成员会默认用当前登陆的接入系统
	AccessSysID string `json:"access_sys_id,omitempty"`

	// 产品目录ID
	CataID string `json:"cata_id,omitempty"`

	// 产品描述
	Description string `json:"description,omitempty"`

	// 产品生效时间
	// Format: date-time
	EffectiveTime *strfmt.DateTime `json:"effective_time,omitempty"`

	// 产品失效时间
	// Format: date-time
	ExpirationTime *strfmt.DateTime `json:"expiration_time,omitempty"`

	// 产品名称  @gotags:valid:"MaxSize(60)"
	Name string `json:"name,omitempty"`

	// 产品编码
	ProdCode string `json:"prod_code,omitempty"`

	// 产品ID  @gotags:valid:"Required"
	ProdID string `json:"prod_id,omitempty"`

	// 产品备注
	Remark string `json:"remark,omitempty"`
}

// Validate validates this newbilling modify product request
func (m *NewbillingModifyProductRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEffectiveTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingModifyProductRequest) validateEffectiveTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveTime) { // not required
		return nil
	}

	if err := validate.FormatOf("effective_time", "body", "date-time", m.EffectiveTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingModifyProductRequest) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_time", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this newbilling modify product request based on context it is used
func (m *NewbillingModifyProductRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingModifyProductRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingModifyProductRequest) UnmarshalBinary(b []byte) error {
	var res NewbillingModifyProductRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
