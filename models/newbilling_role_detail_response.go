// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingRoleDetailResponse 角色详情返回信息
//
// swagger:model newbillingRoleDetailResponse
type NewbillingRoleDetailResponse struct {

	// 角色描述
	Description string `json:"description,omitempty"`

	// 角色ID
	RoleID string `json:"role_id,omitempty"`

	// 角色名称
	RoleName string `json:"role_name,omitempty"`

	// 角色用户信息列表
	RoleUserInfo []*NewbillingRoleUserInfo `json:"role_user_info"`

	// 角色更新时间
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this newbilling role detail response
func (m *NewbillingRoleDetailResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoleUserInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingRoleDetailResponse) validateRoleUserInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleUserInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.RoleUserInfo); i++ {
		if swag.IsZero(m.RoleUserInfo[i]) { // not required
			continue
		}

		if m.RoleUserInfo[i] != nil {
			if err := m.RoleUserInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("role_user_info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("role_user_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingRoleDetailResponse) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this newbilling role detail response based on the context it is used
func (m *NewbillingRoleDetailResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoleUserInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingRoleDetailResponse) contextValidateRoleUserInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoleUserInfo); i++ {

		if m.RoleUserInfo[i] != nil {
			if err := m.RoleUserInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("role_user_info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("role_user_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingRoleDetailResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingRoleDetailResponse) UnmarshalBinary(b []byte) error {
	var res NewbillingRoleDetailResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
