// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingComponentsOfPricingSimpleItem newbilling components of pricing simple item
//
// swagger:model newbillingComponentsOfPricingSimpleItem
type NewbillingComponentsOfPricingSimpleItem struct {

	// 计费项关联属性
	Associate *NewbillingComponentOfPricingSimpleAttr `json:"associate,omitempty"`

	// 计费模式
	BillingMode string `json:"billing_mode,omitempty"`

	// 计费项code
	CompCode string `json:"comp_code,omitempty"`

	// 计费项ID
	CompID string `json:"comp_id,omitempty"`

	// 关联计费项Id
	MappingCompID string `json:"mapping_comp_id,omitempty"`

	// 关联计费项名称
	MappingName string `json:"mapping_name,omitempty"`

	// 计费项名称
	Name string `json:"name,omitempty"`

	// 计费方案ID
	PlanID string `json:"plan_id,omitempty"`

	// 定价模型
	PricingMode string `json:"pricing_mode,omitempty"`

	// 产品ID
	ProdID string `json:"prod_id,omitempty"`

	// 资源包类型
	ResourcePkgType string `json:"resource_pkg_type,omitempty"`

	// 计费项下策略
	Strategies []*NewbillingComponentOfPricingSimpleStrategy `json:"strategies"`

	// 更新时间
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this newbilling components of pricing simple item
func (m *NewbillingComponentsOfPricingSimpleItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingComponentsOfPricingSimpleItem) validateAssociate(formats strfmt.Registry) error {
	if swag.IsZero(m.Associate) { // not required
		return nil
	}

	if m.Associate != nil {
		if err := m.Associate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associate")
			}
			return err
		}
	}

	return nil
}

func (m *NewbillingComponentsOfPricingSimpleItem) validateStrategies(formats strfmt.Registry) error {
	if swag.IsZero(m.Strategies) { // not required
		return nil
	}

	for i := 0; i < len(m.Strategies); i++ {
		if swag.IsZero(m.Strategies[i]) { // not required
			continue
		}

		if m.Strategies[i] != nil {
			if err := m.Strategies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("strategies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingComponentsOfPricingSimpleItem) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this newbilling components of pricing simple item based on the context it is used
func (m *NewbillingComponentsOfPricingSimpleItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssociate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStrategies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingComponentsOfPricingSimpleItem) contextValidateAssociate(ctx context.Context, formats strfmt.Registry) error {

	if m.Associate != nil {
		if err := m.Associate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associate")
			}
			return err
		}
	}

	return nil
}

func (m *NewbillingComponentsOfPricingSimpleItem) contextValidateStrategies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Strategies); i++ {

		if m.Strategies[i] != nil {
			if err := m.Strategies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("strategies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingComponentsOfPricingSimpleItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingComponentsOfPricingSimpleItem) UnmarshalBinary(b []byte) error {
	var res NewbillingComponentsOfPricingSimpleItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
