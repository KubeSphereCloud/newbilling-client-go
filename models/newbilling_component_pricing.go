// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewbillingComponentPricing newbilling component pricing
//
// swagger:model newbillingComponentPricing
type NewbillingComponentPricing struct {

	// attr pricing set
	AttrPricingSet []*NewbillingAttribute `json:"attr_pricing_set"`

	// 基础折扣
	CompBasicDiscount float32 `json:"comp_basic_discount,omitempty"`

	// comp code
	CompCode string `json:"comp_code,omitempty"`

	// 客户折扣
	CompCustomerDiscount float32 `json:"comp_customer_discount,omitempty"`

	// comp customer discount mode
	CompCustomerDiscountMode string `json:"comp_customer_discount_mode,omitempty"`

	// comp final price
	CompFinalPrice float32 `json:"comp_final_price,omitempty"`

	// comp id
	CompID string `json:"comp_id,omitempty"`

	// comp price
	CompPrice float32 `json:"comp_price,omitempty"`

	// component
	Component *NewbillingComponent `json:"component,omitempty"`

	// 实际参与计算的折扣
	Discount float32 `json:"discount,omitempty"`

	// strategy pricing set
	StrategyPricingSet []*NewbillingStrategyPricing `json:"strategy_pricing_set"`
}

// Validate validates this newbilling component pricing
func (m *NewbillingComponentPricing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttrPricingSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategyPricingSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingComponentPricing) validateAttrPricingSet(formats strfmt.Registry) error {
	if swag.IsZero(m.AttrPricingSet) { // not required
		return nil
	}

	for i := 0; i < len(m.AttrPricingSet); i++ {
		if swag.IsZero(m.AttrPricingSet[i]) { // not required
			continue
		}

		if m.AttrPricingSet[i] != nil {
			if err := m.AttrPricingSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attr_pricing_set" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attr_pricing_set" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingComponentPricing) validateComponent(formats strfmt.Registry) error {
	if swag.IsZero(m.Component) { // not required
		return nil
	}

	if m.Component != nil {
		if err := m.Component.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *NewbillingComponentPricing) validateStrategyPricingSet(formats strfmt.Registry) error {
	if swag.IsZero(m.StrategyPricingSet) { // not required
		return nil
	}

	for i := 0; i < len(m.StrategyPricingSet); i++ {
		if swag.IsZero(m.StrategyPricingSet[i]) { // not required
			continue
		}

		if m.StrategyPricingSet[i] != nil {
			if err := m.StrategyPricingSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategy_pricing_set" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("strategy_pricing_set" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this newbilling component pricing based on the context it is used
func (m *NewbillingComponentPricing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttrPricingSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComponent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStrategyPricingSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingComponentPricing) contextValidateAttrPricingSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttrPricingSet); i++ {

		if m.AttrPricingSet[i] != nil {
			if err := m.AttrPricingSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attr_pricing_set" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attr_pricing_set" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingComponentPricing) contextValidateComponent(ctx context.Context, formats strfmt.Registry) error {

	if m.Component != nil {
		if err := m.Component.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *NewbillingComponentPricing) contextValidateStrategyPricingSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StrategyPricingSet); i++ {

		if m.StrategyPricingSet[i] != nil {
			if err := m.StrategyPricingSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategy_pricing_set" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("strategy_pricing_set" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingComponentPricing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingComponentPricing) UnmarshalBinary(b []byte) error {
	var res NewbillingComponentPricing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
