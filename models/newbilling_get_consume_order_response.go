// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingGetConsumeOrderResponse 消费订单
//
// swagger:model newbillingGetConsumeOrderResponse
type NewbillingGetConsumeOrderResponse struct {

	// access sys id
	AccessSysID string `json:"access_sys_id,omitempty"`

	// amount payable
	AmountPayable float32 `json:"amount_payable,omitempty"`

	// charge status
	ChargeStatus string `json:"charge_status,omitempty"`

	// charge time
	// Format: date-time
	ChargeTime strfmt.DateTime `json:"charge_time,omitempty"`

	// components
	Components []*NewbillingSubscriptionComponent `json:"components"`

	// consume type
	ConsumeType string `json:"consume_type,omitempty"`

	// cost
	Cost float32 `json:"cost,omitempty"`

	// create time
	// Format: date-time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// is deleted
	IsDeleted int32 `json:"is_deleted,omitempty"`

	// order user id
	OrderUserID string `json:"order_user_id,omitempty"`

	// order user name
	OrderUserName string `json:"order_user_name,omitempty"`

	// prod id
	ProdID string `json:"prod_id,omitempty"`

	// prod inst consume order id
	ProdInstConsumeOrderID string `json:"prod_inst_consume_order_id,omitempty"`

	// prod inst id
	ProdInstID string `json:"prod_inst_id,omitempty"`

	// prod name
	ProdName string `json:"prod_name,omitempty"`

	// update time
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this newbilling get consume order response
func (m *NewbillingGetConsumeOrderResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChargeTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingGetConsumeOrderResponse) validateChargeTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargeTime) { // not required
		return nil
	}

	if err := validate.FormatOf("charge_time", "body", "date-time", m.ChargeTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingGetConsumeOrderResponse) validateComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {
		if swag.IsZero(m.Components[i]) { // not required
			continue
		}

		if m.Components[i] != nil {
			if err := m.Components[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingGetConsumeOrderResponse) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingGetConsumeOrderResponse) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this newbilling get consume order response based on the context it is used
func (m *NewbillingGetConsumeOrderResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingGetConsumeOrderResponse) contextValidateComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Components); i++ {

		if m.Components[i] != nil {
			if err := m.Components[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingGetConsumeOrderResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingGetConsumeOrderResponse) UnmarshalBinary(b []byte) error {
	var res NewbillingGetConsumeOrderResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
