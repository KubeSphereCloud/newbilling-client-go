// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingUser 用户帐号信息
//
// swagger:model newbillingUser
type NewbillingUser struct {

	// 地址
	Address string `json:"address,omitempty"`

	// 公司编码
	CompanyCode string `json:"company_code,omitempty"`

	// 公司名称
	CompanyName string `json:"company_name,omitempty"`

	// 公司电话
	CompanyPhone string `json:"company_phone,omitempty"`

	// 创建时间
	// Format: date-time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// 货币种类
	Currency string `json:"currency,omitempty"`

	// 用户邮件-帐号
	Email string `json:"email,omitempty"`

	// 用户图像
	Image string `json:"image,omitempty"`

	// 所属行业
	IndustryCategory string `json:"industry_category,omitempty"`

	// 语言
	Lang string `json:"lang,omitempty"`

	// 用户密码
	Passwd string `json:"passwd,omitempty"`

	// 用户编码
	PersonalCode string `json:"personal_code,omitempty"`

	// 用户姓名
	PersonalName string `json:"personal_name,omitempty"`

	// 手机号
	Phone string `json:"phone,omitempty"`

	// 备注
	Remarks string `json:"remarks,omitempty"`

	// 用户角色信息
	Roles []*NewbillingUserRole `json:"roles"`

	// 销售类型
	SaleType string `json:"sale_type,omitempty"`

	// 用户状态- value = 1 可用, value = 2 禁用, value = 3 黑名单, value = 4 未加入
	Status int64 `json:"status,omitempty"`

	// 更新时间
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`

	// 用户ID
	UserID string `json:"user_id,omitempty"`

	// 用户类型
	UserType int64 `json:"user_type,omitempty"`

	// 验证类型
	VerifyType string `json:"verify_type,omitempty"`
}

// Validate validates this newbilling user
func (m *NewbillingUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingUser) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingUser) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingUser) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this newbilling user based on the context it is used
func (m *NewbillingUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingUser) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Roles); i++ {

		if m.Roles[i] != nil {
			if err := m.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingUser) UnmarshalBinary(b []byte) error {
	var res NewbillingUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
