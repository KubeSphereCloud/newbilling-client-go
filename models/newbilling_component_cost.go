// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewbillingComponentCost newbilling component cost
//
// swagger:model newbillingComponentCost
type NewbillingComponentCost struct {

	// 应付金额
	AmountPayable float32 `json:"amount_payable,omitempty"`

	// 命中策略下的属性列表
	Attrs []*NewbillingCostAttribute `json:"attrs"`

	// 基础折扣
	BasicDiscount float32 `json:"basic_discount,omitempty"`

	// 计费模式 - 按包-按资源包；按包-按时间包；按量-按时间使用量；按量-按资源使用量
	BillingMode string `json:"billing_mode,omitempty"`

	// 计费项ID
	CompID string `json:"comp_id,omitempty"`

	// 计费项名称
	CompName string `json:"comp_name,omitempty"`

	// 金额
	Cost float32 `json:"cost,omitempty"`

	// 计费项描述
	Description string `json:"description,omitempty"`

	// 按包-按时间包的超时时间
	PackageTimeOut string `json:"package_time_out,omitempty"`
}

// Validate validates this newbilling component cost
func (m *NewbillingComponentCost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttrs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingComponentCost) validateAttrs(formats strfmt.Registry) error {
	if swag.IsZero(m.Attrs) { // not required
		return nil
	}

	for i := 0; i < len(m.Attrs); i++ {
		if swag.IsZero(m.Attrs[i]) { // not required
			continue
		}

		if m.Attrs[i] != nil {
			if err := m.Attrs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attrs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attrs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this newbilling component cost based on the context it is used
func (m *NewbillingComponentCost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttrs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingComponentCost) contextValidateAttrs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attrs); i++ {

		if m.Attrs[i] != nil {
			if err := m.Attrs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attrs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attrs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingComponentCost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingComponentCost) UnmarshalBinary(b []byte) error {
	var res NewbillingComponentCost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
