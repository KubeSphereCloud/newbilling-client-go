// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingModifyCustomerDiscountRequest 修改客户折扣请求信息
//
// swagger:model newbillingModifyCustomerDiscountRequest
type NewbillingModifyCustomerDiscountRequest struct {

	// 接入系统ID
	AccessSysID string `json:"access_sys_id,omitempty"`

	// 客户折扣描述
	CustomerDiscountDesc string `json:"customer_discount_desc,omitempty"`

	// 客户折扣ID
	CustomerDiscountID string `json:"customer_discount_id,omitempty"`

	// 客户折扣名称 @gotags:valid:"MaxSize(50)"
	CustomerDiscountName string `json:"customer_discount_name,omitempty"`

	// 客户ID
	CustomerID string `json:"customer_id,omitempty"`

	// 是否禁用- 0：启用，1：禁用
	Disabled bool `json:"disabled,omitempty"`

	// 折扣模式 user=用户折扣为准 both=折上折（默认）
	DiscountMode string `json:"discount_mode,omitempty"`

	// 折扣值
	DiscountValue int64 `json:"discount_value,omitempty"`

	// 客户折扣生效时间
	// Format: date-time
	EffectiveTime strfmt.DateTime `json:"effective_time,omitempty"`

	// 客户折扣失效时间
	// Format: date-time
	ExpirationTime strfmt.DateTime `json:"expiration_time,omitempty"`

	// 折扣需要满足的条件组
	FiltersMapList []*NewbillingDiscountFilerMap `json:"filters_map_list"`
}

// Validate validates this newbilling modify customer discount request
func (m *NewbillingModifyCustomerDiscountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEffectiveTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiltersMapList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingModifyCustomerDiscountRequest) validateEffectiveTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveTime) { // not required
		return nil
	}

	if err := validate.FormatOf("effective_time", "body", "date-time", m.EffectiveTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingModifyCustomerDiscountRequest) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_time", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingModifyCustomerDiscountRequest) validateFiltersMapList(formats strfmt.Registry) error {
	if swag.IsZero(m.FiltersMapList) { // not required
		return nil
	}

	for i := 0; i < len(m.FiltersMapList); i++ {
		if swag.IsZero(m.FiltersMapList[i]) { // not required
			continue
		}

		if m.FiltersMapList[i] != nil {
			if err := m.FiltersMapList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters_map_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filters_map_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this newbilling modify customer discount request based on the context it is used
func (m *NewbillingModifyCustomerDiscountRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiltersMapList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingModifyCustomerDiscountRequest) contextValidateFiltersMapList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FiltersMapList); i++ {

		if m.FiltersMapList[i] != nil {
			if err := m.FiltersMapList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters_map_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filters_map_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingModifyCustomerDiscountRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingModifyCustomerDiscountRequest) UnmarshalBinary(b []byte) error {
	var res NewbillingModifyCustomerDiscountRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
