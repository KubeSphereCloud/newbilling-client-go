// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingGetPrdOrderResponse newbilling get prd order response
//
// swagger:model newbillingGetPrdOrderResponse
type NewbillingGetPrdOrderResponse struct {

	// 接入系统ID
	AccessSysID string `json:"access_sys_id,omitempty"`

	// amount payable
	AmountPayable float32 `json:"amount_payable,omitempty"`

	// bills
	Bills []*NewbillingBill `json:"bills"`

	// 支付时间
	// Format: date-time
	ChargeTime *strfmt.DateTime `json:"charge_time,omitempty"`

	// cost
	Cost float32 `json:"cost,omitempty"`

	// 主订单创建时间
	// Format: date-time
	CreateTime *strfmt.DateTime `json:"create_time,omitempty"`

	// 自定义信息
	ExtraInfo string `json:"extra_info,omitempty"`

	// order amount
	OrderAmount float32 `json:"order_amount,omitempty"`

	// order cost
	OrderCost float32 `json:"order_cost,omitempty"`

	// 主订单ID
	OrderID string `json:"order_id,omitempty"`

	// 主订单状态- 待支付、已支付、作废
	OrderStatus string `json:"order_status,omitempty"`

	// order type
	OrderType string `json:"order_type,omitempty"`

	// 主订单用户ID
	OrderUserID string `json:"order_user_id,omitempty"`

	// 主订单用户名称
	OrderUserName string `json:"order_user_name,omitempty"`

	// subs components
	SubsComponents []*NewbillingSubscriptionComponentMini `json:"subs_components"`

	// 主订单更新时间
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this newbilling get prd order response
func (m *NewbillingGetPrdOrderResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBills(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargeTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubsComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingGetPrdOrderResponse) validateBills(formats strfmt.Registry) error {
	if swag.IsZero(m.Bills) { // not required
		return nil
	}

	for i := 0; i < len(m.Bills); i++ {
		if swag.IsZero(m.Bills[i]) { // not required
			continue
		}

		if m.Bills[i] != nil {
			if err := m.Bills[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bills" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bills" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingGetPrdOrderResponse) validateChargeTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargeTime) { // not required
		return nil
	}

	if err := validate.FormatOf("charge_time", "body", "date-time", m.ChargeTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingGetPrdOrderResponse) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingGetPrdOrderResponse) validateSubsComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.SubsComponents) { // not required
		return nil
	}

	for i := 0; i < len(m.SubsComponents); i++ {
		if swag.IsZero(m.SubsComponents[i]) { // not required
			continue
		}

		if m.SubsComponents[i] != nil {
			if err := m.SubsComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subs_components" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subs_components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingGetPrdOrderResponse) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this newbilling get prd order response based on the context it is used
func (m *NewbillingGetPrdOrderResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBills(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubsComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingGetPrdOrderResponse) contextValidateBills(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bills); i++ {

		if m.Bills[i] != nil {
			if err := m.Bills[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bills" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bills" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewbillingGetPrdOrderResponse) contextValidateSubsComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubsComponents); i++ {

		if m.SubsComponents[i] != nil {
			if err := m.SubsComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subs_components" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subs_components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingGetPrdOrderResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingGetPrdOrderResponse) UnmarshalBinary(b []byte) error {
	var res NewbillingGetPrdOrderResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
