// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewbillingService 查询接对接服务请求
//
// swagger:model newbillingService
type NewbillingService struct {

	// 对接服务渠道，目前仅payment服务支持 pitrix-charging(iaas计费)/alipay
	Channel string `json:"channel,omitempty"`

	// 对接服务配置信息，json串形式
	Content string `json:"content,omitempty"`

	// 创建时间
	// Format: date-time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// 创建者
	CreatedBy string `json:"created_by,omitempty"`

	// 对接系统服务配置对象id
	ScopeID string `json:"scope_id,omitempty"`

	// 对接系统服务配置对象
	ScopeType string `json:"scope_type,omitempty"`

	// 对接服务，目前支持 account/payment/metering/notifier
	Service string `json:"service,omitempty"`

	// 更新时间
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this newbilling service
func (m *NewbillingService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewbillingService) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewbillingService) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this newbilling service based on context it is used
func (m *NewbillingService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewbillingService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewbillingService) UnmarshalBinary(b []byte) error {
	var res NewbillingService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
