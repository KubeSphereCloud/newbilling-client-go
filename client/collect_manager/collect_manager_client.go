// Code generated by go-swagger; DO NOT EDIT.

package collect_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new collect manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for collect manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CollectManagerCreateCollectData(params *CollectManagerCreateCollectDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerCreateCollectDataOK, error)

	CollectManagerCreateCollectEvent(params *CollectManagerCreateCollectEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerCreateCollectEventOK, error)

	CollectManagerDescribeCollectData(params *CollectManagerDescribeCollectDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerDescribeCollectDataOK, error)

	CollectManagerDescribeCollectEvents(params *CollectManagerDescribeCollectEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerDescribeCollectEventsOK, error)

	CollectManagerPushCollectData(params *CollectManagerPushCollectDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerPushCollectDataOK, error)

	CollectManagerStartCollect(params *CollectManagerStartCollectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerStartCollectOK, error)

	CollectManagerStopCollect(params *CollectManagerStopCollectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerStopCollectOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CollectManagerCreateCollectData 采集数据s 创建
*/
func (a *Client) CollectManagerCreateCollectData(params *CollectManagerCreateCollectDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerCreateCollectDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectManagerCreateCollectDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CollectManager_CreateCollectData",
		Method:             "POST",
		PathPattern:        "/v1/collect/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectManagerCreateCollectDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectManagerCreateCollectDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectManagerCreateCollectDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectManagerCreateCollectEvent 采集事件s 创建
*/
func (a *Client) CollectManagerCreateCollectEvent(params *CollectManagerCreateCollectEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerCreateCollectEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectManagerCreateCollectEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CollectManager_CreateCollectEvent",
		Method:             "POST",
		PathPattern:        "/v1/collect/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectManagerCreateCollectEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectManagerCreateCollectEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectManagerCreateCollectEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectManagerDescribeCollectData 采集数据s 列表
*/
func (a *Client) CollectManagerDescribeCollectData(params *CollectManagerDescribeCollectDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerDescribeCollectDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectManagerDescribeCollectDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CollectManager_DescribeCollectData",
		Method:             "GET",
		PathPattern:        "/v1/collect/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectManagerDescribeCollectDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectManagerDescribeCollectDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectManagerDescribeCollectDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectManagerDescribeCollectEvents 采集事件s 列表
*/
func (a *Client) CollectManagerDescribeCollectEvents(params *CollectManagerDescribeCollectEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerDescribeCollectEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectManagerDescribeCollectEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CollectManager_DescribeCollectEvents",
		Method:             "GET",
		PathPattern:        "/v1/collect/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectManagerDescribeCollectEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectManagerDescribeCollectEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectManagerDescribeCollectEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectManagerPushCollectData 计量推送s
*/
func (a *Client) CollectManagerPushCollectData(params *CollectManagerPushCollectDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerPushCollectDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectManagerPushCollectDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CollectManager_PushCollectData",
		Method:             "POST",
		PathPattern:        "/v1/collect_data:push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectManagerPushCollectDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectManagerPushCollectDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectManagerPushCollectDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectManagerStartCollect 采集s 开始
*/
func (a *Client) CollectManagerStartCollect(params *CollectManagerStartCollectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerStartCollectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectManagerStartCollectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CollectManager_StartCollect",
		Method:             "POST",
		PathPattern:        "/v1/collect:start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectManagerStartCollectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectManagerStartCollectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectManagerStartCollectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectManagerStopCollect 采集s 停止
*/
func (a *Client) CollectManagerStopCollect(params *CollectManagerStopCollectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CollectManagerStopCollectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectManagerStopCollectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CollectManager_StopCollect",
		Method:             "POST",
		PathPattern:        "/v1/collect:stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectManagerStopCollectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectManagerStopCollectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectManagerStopCollectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
