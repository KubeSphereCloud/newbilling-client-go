// Code generated by go-swagger; DO NOT EDIT.

package collect_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCollectManagerDescribeCollectDataParams creates a new CollectManagerDescribeCollectDataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCollectManagerDescribeCollectDataParams() *CollectManagerDescribeCollectDataParams {
	return &CollectManagerDescribeCollectDataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCollectManagerDescribeCollectDataParamsWithTimeout creates a new CollectManagerDescribeCollectDataParams object
// with the ability to set a timeout on a request.
func NewCollectManagerDescribeCollectDataParamsWithTimeout(timeout time.Duration) *CollectManagerDescribeCollectDataParams {
	return &CollectManagerDescribeCollectDataParams{
		timeout: timeout,
	}
}

// NewCollectManagerDescribeCollectDataParamsWithContext creates a new CollectManagerDescribeCollectDataParams object
// with the ability to set a context for a request.
func NewCollectManagerDescribeCollectDataParamsWithContext(ctx context.Context) *CollectManagerDescribeCollectDataParams {
	return &CollectManagerDescribeCollectDataParams{
		Context: ctx,
	}
}

// NewCollectManagerDescribeCollectDataParamsWithHTTPClient creates a new CollectManagerDescribeCollectDataParams object
// with the ability to set a custom HTTPClient for a request.
func NewCollectManagerDescribeCollectDataParamsWithHTTPClient(client *http.Client) *CollectManagerDescribeCollectDataParams {
	return &CollectManagerDescribeCollectDataParams{
		HTTPClient: client,
	}
}

/*
CollectManagerDescribeCollectDataParams contains all the parameters to send to the API endpoint

	for the collect manager describe collect data operation.

	Typically these are written to a http.Request.
*/
type CollectManagerDescribeCollectDataParams struct {

	/* AccessSysID.

	   接入系统ID.
	*/
	AccessSysID *string

	/* AttrID.

	   计量指标属性ID.
	*/
	AttrID []string

	/* CollectEventID.

	   采集事件ID.
	*/
	CollectEventID []string

	/* EndTime.

	   结束时间.

	   Format: date-time
	*/
	EndTime *strfmt.DateTime

	/* Limit.

	   数据库查询每页大小 - 默认 20, 最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Offset.

	   数据库查询偏移位置 - 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* ProdID.

	   产品ID.
	*/
	ProdID []string

	/* ProdInstIDExt.

	   资源ID.
	*/
	ProdInstIDExt []string

	/* Reverse.

	   是否倒序排序 - value = 0 sort ASC, value = 1 sort DESC.
	*/
	Reverse *bool

	/* SearchWord.

	   模糊查询关键字.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	/* StartTime.

	   开始时间.

	   Format: date-time
	*/
	StartTime *strfmt.DateTime

	/* Target.

	   计量指标.
	*/
	Target []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the collect manager describe collect data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CollectManagerDescribeCollectDataParams) WithDefaults() *CollectManagerDescribeCollectDataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the collect manager describe collect data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CollectManagerDescribeCollectDataParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithTimeout(timeout time.Duration) *CollectManagerDescribeCollectDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithContext(ctx context.Context) *CollectManagerDescribeCollectDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithHTTPClient(client *http.Client) *CollectManagerDescribeCollectDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessSysID adds the accessSysID to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithAccessSysID(accessSysID *string) *CollectManagerDescribeCollectDataParams {
	o.SetAccessSysID(accessSysID)
	return o
}

// SetAccessSysID adds the accessSysId to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetAccessSysID(accessSysID *string) {
	o.AccessSysID = accessSysID
}

// WithAttrID adds the attrID to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithAttrID(attrID []string) *CollectManagerDescribeCollectDataParams {
	o.SetAttrID(attrID)
	return o
}

// SetAttrID adds the attrId to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetAttrID(attrID []string) {
	o.AttrID = attrID
}

// WithCollectEventID adds the collectEventID to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithCollectEventID(collectEventID []string) *CollectManagerDescribeCollectDataParams {
	o.SetCollectEventID(collectEventID)
	return o
}

// SetCollectEventID adds the collectEventId to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetCollectEventID(collectEventID []string) {
	o.CollectEventID = collectEventID
}

// WithEndTime adds the endTime to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithEndTime(endTime *strfmt.DateTime) *CollectManagerDescribeCollectDataParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetEndTime(endTime *strfmt.DateTime) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithLimit(limit *string) *CollectManagerDescribeCollectDataParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithOffset(offset *string) *CollectManagerDescribeCollectDataParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithProdID adds the prodID to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithProdID(prodID []string) *CollectManagerDescribeCollectDataParams {
	o.SetProdID(prodID)
	return o
}

// SetProdID adds the prodId to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetProdID(prodID []string) {
	o.ProdID = prodID
}

// WithProdInstIDExt adds the prodInstIDExt to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithProdInstIDExt(prodInstIDExt []string) *CollectManagerDescribeCollectDataParams {
	o.SetProdInstIDExt(prodInstIDExt)
	return o
}

// SetProdInstIDExt adds the prodInstIdExt to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetProdInstIDExt(prodInstIDExt []string) {
	o.ProdInstIDExt = prodInstIDExt
}

// WithReverse adds the reverse to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithReverse(reverse *bool) *CollectManagerDescribeCollectDataParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithSearchWord(searchWord *string) *CollectManagerDescribeCollectDataParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithSortKey(sortKey *string) *CollectManagerDescribeCollectDataParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStartTime adds the startTime to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithStartTime(startTime *strfmt.DateTime) *CollectManagerDescribeCollectDataParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetStartTime(startTime *strfmt.DateTime) {
	o.StartTime = startTime
}

// WithTarget adds the target to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) WithTarget(target []string) *CollectManagerDescribeCollectDataParams {
	o.SetTarget(target)
	return o
}

// SetTarget adds the target to the collect manager describe collect data params
func (o *CollectManagerDescribeCollectDataParams) SetTarget(target []string) {
	o.Target = target
}

// WriteToRequest writes these params to a swagger request
func (o *CollectManagerDescribeCollectDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessSysID != nil {

		// query param access_sys_id
		var qrAccessSysID string

		if o.AccessSysID != nil {
			qrAccessSysID = *o.AccessSysID
		}
		qAccessSysID := qrAccessSysID
		if qAccessSysID != "" {

			if err := r.SetQueryParam("access_sys_id", qAccessSysID); err != nil {
				return err
			}
		}
	}

	if o.AttrID != nil {

		// binding items for attr_id
		joinedAttrID := o.bindParamAttrID(reg)

		// query array param attr_id
		if err := r.SetQueryParam("attr_id", joinedAttrID...); err != nil {
			return err
		}
	}

	if o.CollectEventID != nil {

		// binding items for collect_event_id
		joinedCollectEventID := o.bindParamCollectEventID(reg)

		// query array param collect_event_id
		if err := r.SetQueryParam("collect_event_id", joinedCollectEventID...); err != nil {
			return err
		}
	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime strfmt.DateTime

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ProdID != nil {

		// binding items for prod_id
		joinedProdID := o.bindParamProdID(reg)

		// query array param prod_id
		if err := r.SetQueryParam("prod_id", joinedProdID...); err != nil {
			return err
		}
	}

	if o.ProdInstIDExt != nil {

		// binding items for prod_inst_id_ext
		joinedProdInstIDExt := o.bindParamProdInstIDExt(reg)

		// query array param prod_inst_id_ext
		if err := r.SetQueryParam("prod_inst_id_ext", joinedProdInstIDExt...); err != nil {
			return err
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param start_time
		var qrStartTime strfmt.DateTime

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {

			if err := r.SetQueryParam("start_time", qStartTime); err != nil {
				return err
			}
		}
	}

	if o.Target != nil {

		// binding items for target
		joinedTarget := o.bindParamTarget(reg)

		// query array param target
		if err := r.SetQueryParam("target", joinedTarget...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCollectManagerDescribeCollectData binds the parameter attr_id
func (o *CollectManagerDescribeCollectDataParams) bindParamAttrID(formats strfmt.Registry) []string {
	attrIDIR := o.AttrID

	var attrIDIC []string
	for _, attrIDIIR := range attrIDIR { // explode []string

		attrIDIIV := attrIDIIR // string as string
		attrIDIC = append(attrIDIC, attrIDIIV)
	}

	// items.CollectionFormat: "multi"
	attrIDIS := swag.JoinByFormat(attrIDIC, "multi")

	return attrIDIS
}

// bindParamCollectManagerDescribeCollectData binds the parameter collect_event_id
func (o *CollectManagerDescribeCollectDataParams) bindParamCollectEventID(formats strfmt.Registry) []string {
	collectEventIDIR := o.CollectEventID

	var collectEventIDIC []string
	for _, collectEventIDIIR := range collectEventIDIR { // explode []string

		collectEventIDIIV := collectEventIDIIR // string as string
		collectEventIDIC = append(collectEventIDIC, collectEventIDIIV)
	}

	// items.CollectionFormat: "multi"
	collectEventIDIS := swag.JoinByFormat(collectEventIDIC, "multi")

	return collectEventIDIS
}

// bindParamCollectManagerDescribeCollectData binds the parameter prod_id
func (o *CollectManagerDescribeCollectDataParams) bindParamProdID(formats strfmt.Registry) []string {
	prodIDIR := o.ProdID

	var prodIDIC []string
	for _, prodIDIIR := range prodIDIR { // explode []string

		prodIDIIV := prodIDIIR // string as string
		prodIDIC = append(prodIDIC, prodIDIIV)
	}

	// items.CollectionFormat: "multi"
	prodIDIS := swag.JoinByFormat(prodIDIC, "multi")

	return prodIDIS
}

// bindParamCollectManagerDescribeCollectData binds the parameter prod_inst_id_ext
func (o *CollectManagerDescribeCollectDataParams) bindParamProdInstIDExt(formats strfmt.Registry) []string {
	prodInstIDExtIR := o.ProdInstIDExt

	var prodInstIDExtIC []string
	for _, prodInstIDExtIIR := range prodInstIDExtIR { // explode []string

		prodInstIDExtIIV := prodInstIDExtIIR // string as string
		prodInstIDExtIC = append(prodInstIDExtIC, prodInstIDExtIIV)
	}

	// items.CollectionFormat: "multi"
	prodInstIDExtIS := swag.JoinByFormat(prodInstIDExtIC, "multi")

	return prodInstIDExtIS
}

// bindParamCollectManagerDescribeCollectData binds the parameter target
func (o *CollectManagerDescribeCollectDataParams) bindParamTarget(formats strfmt.Registry) []string {
	targetIR := o.Target

	var targetIC []string
	for _, targetIIR := range targetIR { // explode []string

		targetIIV := targetIIR // string as string
		targetIC = append(targetIC, targetIIV)
	}

	// items.CollectionFormat: "multi"
	targetIS := swag.JoinByFormat(targetIC, "multi")

	return targetIS
}
