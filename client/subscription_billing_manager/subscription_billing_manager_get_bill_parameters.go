// Code generated by go-swagger; DO NOT EDIT.

package subscription_billing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSubscriptionBillingManagerGetBillParams creates a new SubscriptionBillingManagerGetBillParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSubscriptionBillingManagerGetBillParams() *SubscriptionBillingManagerGetBillParams {
	return &SubscriptionBillingManagerGetBillParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSubscriptionBillingManagerGetBillParamsWithTimeout creates a new SubscriptionBillingManagerGetBillParams object
// with the ability to set a timeout on a request.
func NewSubscriptionBillingManagerGetBillParamsWithTimeout(timeout time.Duration) *SubscriptionBillingManagerGetBillParams {
	return &SubscriptionBillingManagerGetBillParams{
		timeout: timeout,
	}
}

// NewSubscriptionBillingManagerGetBillParamsWithContext creates a new SubscriptionBillingManagerGetBillParams object
// with the ability to set a context for a request.
func NewSubscriptionBillingManagerGetBillParamsWithContext(ctx context.Context) *SubscriptionBillingManagerGetBillParams {
	return &SubscriptionBillingManagerGetBillParams{
		Context: ctx,
	}
}

// NewSubscriptionBillingManagerGetBillParamsWithHTTPClient creates a new SubscriptionBillingManagerGetBillParams object
// with the ability to set a custom HTTPClient for a request.
func NewSubscriptionBillingManagerGetBillParamsWithHTTPClient(client *http.Client) *SubscriptionBillingManagerGetBillParams {
	return &SubscriptionBillingManagerGetBillParams{
		HTTPClient: client,
	}
}

/*
SubscriptionBillingManagerGetBillParams contains all the parameters to send to the API endpoint

	for the subscription billing manager get bill operation.

	Typically these are written to a http.Request.
*/
type SubscriptionBillingManagerGetBillParams struct {

	/* BillID.

	   计费账单ID
	*/
	BillID string

	// ProdInstID.
	ProdInstID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the subscription billing manager get bill params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SubscriptionBillingManagerGetBillParams) WithDefaults() *SubscriptionBillingManagerGetBillParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the subscription billing manager get bill params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SubscriptionBillingManagerGetBillParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) WithTimeout(timeout time.Duration) *SubscriptionBillingManagerGetBillParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) WithContext(ctx context.Context) *SubscriptionBillingManagerGetBillParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) WithHTTPClient(client *http.Client) *SubscriptionBillingManagerGetBillParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBillID adds the billID to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) WithBillID(billID string) *SubscriptionBillingManagerGetBillParams {
	o.SetBillID(billID)
	return o
}

// SetBillID adds the billId to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) SetBillID(billID string) {
	o.BillID = billID
}

// WithProdInstID adds the prodInstID to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) WithProdInstID(prodInstID *string) *SubscriptionBillingManagerGetBillParams {
	o.SetProdInstID(prodInstID)
	return o
}

// SetProdInstID adds the prodInstId to the subscription billing manager get bill params
func (o *SubscriptionBillingManagerGetBillParams) SetProdInstID(prodInstID *string) {
	o.ProdInstID = prodInstID
}

// WriteToRequest writes these params to a swagger request
func (o *SubscriptionBillingManagerGetBillParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param bill_id
	if err := r.SetPathParam("bill_id", o.BillID); err != nil {
		return err
	}

	if o.ProdInstID != nil {

		// query param prod_inst_id
		var qrProdInstID string

		if o.ProdInstID != nil {
			qrProdInstID = *o.ProdInstID
		}
		qProdInstID := qrProdInstID
		if qProdInstID != "" {

			if err := r.SetQueryParam("prod_inst_id", qProdInstID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
