// Code generated by go-swagger; DO NOT EDIT.

package subscription_billing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subscription billing manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscription billing manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SubscriptionBillingManagerDescribeBillingJobs(params *SubscriptionBillingManagerDescribeBillingJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionBillingManagerDescribeBillingJobsOK, error)

	SubscriptionBillingManagerDescribeBills(params *SubscriptionBillingManagerDescribeBillsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionBillingManagerDescribeBillsOK, error)

	SubscriptionBillingManagerGetBill(params *SubscriptionBillingManagerGetBillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionBillingManagerGetBillOK, error)

	SubscriptionBillingManagerPerformBillingJob(params *SubscriptionBillingManagerPerformBillingJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionBillingManagerPerformBillingJobOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SubscriptionBillingManagerDescribeBillingJobs ns b内部调用 查询计费作业列表
*/
func (a *Client) SubscriptionBillingManagerDescribeBillingJobs(params *SubscriptionBillingManagerDescribeBillingJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionBillingManagerDescribeBillingJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionBillingManagerDescribeBillingJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionBillingManager_DescribeBillingJobs",
		Method:             "GET",
		PathPattern:        "/v1/billingjobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionBillingManagerDescribeBillingJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionBillingManagerDescribeBillingJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionBillingManagerDescribeBillingJobsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionBillingManagerDescribeBills 查询计费账单列表s
*/
func (a *Client) SubscriptionBillingManagerDescribeBills(params *SubscriptionBillingManagerDescribeBillsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionBillingManagerDescribeBillsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionBillingManagerDescribeBillsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionBillingManager_DescribeBills",
		Method:             "GET",
		PathPattern:        "/v1/bills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionBillingManagerDescribeBillsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionBillingManagerDescribeBillsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionBillingManagerDescribeBillsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionBillingManagerGetBill 查询单条账单信息s
*/
func (a *Client) SubscriptionBillingManagerGetBill(params *SubscriptionBillingManagerGetBillParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionBillingManagerGetBillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionBillingManagerGetBillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionBillingManager_GetBill",
		Method:             "GET",
		PathPattern:        "/v1/bills/{bill_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionBillingManagerGetBillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionBillingManagerGetBillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionBillingManagerGetBillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionBillingManagerPerformBillingJob ns b内部调用 回调执行计费任务
*/
func (a *Client) SubscriptionBillingManagerPerformBillingJob(params *SubscriptionBillingManagerPerformBillingJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionBillingManagerPerformBillingJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionBillingManagerPerformBillingJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionBillingManager_PerformBillingJob",
		Method:             "PUT",
		PathPattern:        "/v1/billingjobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionBillingManagerPerformBillingJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionBillingManagerPerformBillingJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionBillingManagerPerformBillingJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
