// Code generated by go-swagger; DO NOT EDIT.

package charging_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewChargingManagerGetChargeQrcodeParams creates a new ChargingManagerGetChargeQrcodeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewChargingManagerGetChargeQrcodeParams() *ChargingManagerGetChargeQrcodeParams {
	return &ChargingManagerGetChargeQrcodeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewChargingManagerGetChargeQrcodeParamsWithTimeout creates a new ChargingManagerGetChargeQrcodeParams object
// with the ability to set a timeout on a request.
func NewChargingManagerGetChargeQrcodeParamsWithTimeout(timeout time.Duration) *ChargingManagerGetChargeQrcodeParams {
	return &ChargingManagerGetChargeQrcodeParams{
		timeout: timeout,
	}
}

// NewChargingManagerGetChargeQrcodeParamsWithContext creates a new ChargingManagerGetChargeQrcodeParams object
// with the ability to set a context for a request.
func NewChargingManagerGetChargeQrcodeParamsWithContext(ctx context.Context) *ChargingManagerGetChargeQrcodeParams {
	return &ChargingManagerGetChargeQrcodeParams{
		Context: ctx,
	}
}

// NewChargingManagerGetChargeQrcodeParamsWithHTTPClient creates a new ChargingManagerGetChargeQrcodeParams object
// with the ability to set a custom HTTPClient for a request.
func NewChargingManagerGetChargeQrcodeParamsWithHTTPClient(client *http.Client) *ChargingManagerGetChargeQrcodeParams {
	return &ChargingManagerGetChargeQrcodeParams{
		HTTPClient: client,
	}
}

/*
ChargingManagerGetChargeQrcodeParams contains all the parameters to send to the API endpoint

	for the charging manager get charge qrcode operation.

	Typically these are written to a http.Request.
*/
type ChargingManagerGetChargeQrcodeParams struct {

	/* AccessSysID.

	   接入系统ID.
	*/
	AccessSysID *string

	/* BillID.

	   账单ID.
	*/
	BillID *string

	/* ChargeAmount.

	   支付金额.

	   Format: float
	*/
	ChargeAmount *float32

	/* ChargeChannel.

	   支付渠道- 余额、直付、外部.
	*/
	ChargeChannel *string

	/* CreatedBy.

	   支付记录创建人.
	*/
	CreatedBy *string

	/* CurrencyCode.

	   支付货币单位.
	*/
	CurrencyCode *string

	// PassbackParams.
	PassbackParams *string

	// ProdInstIDExt.
	ProdInstIDExt *string

	/* Remarks.

	   备注.
	*/
	Remarks *string

	/* UserID.

	   用户ID.
	*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the charging manager get charge qrcode params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ChargingManagerGetChargeQrcodeParams) WithDefaults() *ChargingManagerGetChargeQrcodeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the charging manager get charge qrcode params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ChargingManagerGetChargeQrcodeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithTimeout(timeout time.Duration) *ChargingManagerGetChargeQrcodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithContext(ctx context.Context) *ChargingManagerGetChargeQrcodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithHTTPClient(client *http.Client) *ChargingManagerGetChargeQrcodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessSysID adds the accessSysID to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithAccessSysID(accessSysID *string) *ChargingManagerGetChargeQrcodeParams {
	o.SetAccessSysID(accessSysID)
	return o
}

// SetAccessSysID adds the accessSysId to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetAccessSysID(accessSysID *string) {
	o.AccessSysID = accessSysID
}

// WithBillID adds the billID to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithBillID(billID *string) *ChargingManagerGetChargeQrcodeParams {
	o.SetBillID(billID)
	return o
}

// SetBillID adds the billId to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetBillID(billID *string) {
	o.BillID = billID
}

// WithChargeAmount adds the chargeAmount to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithChargeAmount(chargeAmount *float32) *ChargingManagerGetChargeQrcodeParams {
	o.SetChargeAmount(chargeAmount)
	return o
}

// SetChargeAmount adds the chargeAmount to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetChargeAmount(chargeAmount *float32) {
	o.ChargeAmount = chargeAmount
}

// WithChargeChannel adds the chargeChannel to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithChargeChannel(chargeChannel *string) *ChargingManagerGetChargeQrcodeParams {
	o.SetChargeChannel(chargeChannel)
	return o
}

// SetChargeChannel adds the chargeChannel to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetChargeChannel(chargeChannel *string) {
	o.ChargeChannel = chargeChannel
}

// WithCreatedBy adds the createdBy to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithCreatedBy(createdBy *string) *ChargingManagerGetChargeQrcodeParams {
	o.SetCreatedBy(createdBy)
	return o
}

// SetCreatedBy adds the createdBy to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetCreatedBy(createdBy *string) {
	o.CreatedBy = createdBy
}

// WithCurrencyCode adds the currencyCode to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithCurrencyCode(currencyCode *string) *ChargingManagerGetChargeQrcodeParams {
	o.SetCurrencyCode(currencyCode)
	return o
}

// SetCurrencyCode adds the currencyCode to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetCurrencyCode(currencyCode *string) {
	o.CurrencyCode = currencyCode
}

// WithPassbackParams adds the passbackParams to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithPassbackParams(passbackParams *string) *ChargingManagerGetChargeQrcodeParams {
	o.SetPassbackParams(passbackParams)
	return o
}

// SetPassbackParams adds the passbackParams to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetPassbackParams(passbackParams *string) {
	o.PassbackParams = passbackParams
}

// WithProdInstIDExt adds the prodInstIDExt to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithProdInstIDExt(prodInstIDExt *string) *ChargingManagerGetChargeQrcodeParams {
	o.SetProdInstIDExt(prodInstIDExt)
	return o
}

// SetProdInstIDExt adds the prodInstIdExt to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetProdInstIDExt(prodInstIDExt *string) {
	o.ProdInstIDExt = prodInstIDExt
}

// WithRemarks adds the remarks to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithRemarks(remarks *string) *ChargingManagerGetChargeQrcodeParams {
	o.SetRemarks(remarks)
	return o
}

// SetRemarks adds the remarks to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetRemarks(remarks *string) {
	o.Remarks = remarks
}

// WithUserID adds the userID to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) WithUserID(userID *string) *ChargingManagerGetChargeQrcodeParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the charging manager get charge qrcode params
func (o *ChargingManagerGetChargeQrcodeParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *ChargingManagerGetChargeQrcodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessSysID != nil {

		// query param access_sys_id
		var qrAccessSysID string

		if o.AccessSysID != nil {
			qrAccessSysID = *o.AccessSysID
		}
		qAccessSysID := qrAccessSysID
		if qAccessSysID != "" {

			if err := r.SetQueryParam("access_sys_id", qAccessSysID); err != nil {
				return err
			}
		}
	}

	if o.BillID != nil {

		// query param bill_id
		var qrBillID string

		if o.BillID != nil {
			qrBillID = *o.BillID
		}
		qBillID := qrBillID
		if qBillID != "" {

			if err := r.SetQueryParam("bill_id", qBillID); err != nil {
				return err
			}
		}
	}

	if o.ChargeAmount != nil {

		// query param charge_amount
		var qrChargeAmount float32

		if o.ChargeAmount != nil {
			qrChargeAmount = *o.ChargeAmount
		}
		qChargeAmount := swag.FormatFloat32(qrChargeAmount)
		if qChargeAmount != "" {

			if err := r.SetQueryParam("charge_amount", qChargeAmount); err != nil {
				return err
			}
		}
	}

	if o.ChargeChannel != nil {

		// query param charge_channel
		var qrChargeChannel string

		if o.ChargeChannel != nil {
			qrChargeChannel = *o.ChargeChannel
		}
		qChargeChannel := qrChargeChannel
		if qChargeChannel != "" {

			if err := r.SetQueryParam("charge_channel", qChargeChannel); err != nil {
				return err
			}
		}
	}

	if o.CreatedBy != nil {

		// query param created_by
		var qrCreatedBy string

		if o.CreatedBy != nil {
			qrCreatedBy = *o.CreatedBy
		}
		qCreatedBy := qrCreatedBy
		if qCreatedBy != "" {

			if err := r.SetQueryParam("created_by", qCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.CurrencyCode != nil {

		// query param currency_code
		var qrCurrencyCode string

		if o.CurrencyCode != nil {
			qrCurrencyCode = *o.CurrencyCode
		}
		qCurrencyCode := qrCurrencyCode
		if qCurrencyCode != "" {

			if err := r.SetQueryParam("currency_code", qCurrencyCode); err != nil {
				return err
			}
		}
	}

	if o.PassbackParams != nil {

		// query param passback_params
		var qrPassbackParams string

		if o.PassbackParams != nil {
			qrPassbackParams = *o.PassbackParams
		}
		qPassbackParams := qrPassbackParams
		if qPassbackParams != "" {

			if err := r.SetQueryParam("passback_params", qPassbackParams); err != nil {
				return err
			}
		}
	}

	if o.ProdInstIDExt != nil {

		// query param prod_inst_id_ext
		var qrProdInstIDExt string

		if o.ProdInstIDExt != nil {
			qrProdInstIDExt = *o.ProdInstIDExt
		}
		qProdInstIDExt := qrProdInstIDExt
		if qProdInstIDExt != "" {

			if err := r.SetQueryParam("prod_inst_id_ext", qProdInstIDExt); err != nil {
				return err
			}
		}
	}

	if o.Remarks != nil {

		// query param remarks
		var qrRemarks string

		if o.Remarks != nil {
			qrRemarks = *o.Remarks
		}
		qRemarks := qrRemarks
		if qRemarks != "" {

			if err := r.SetQueryParam("remarks", qRemarks); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
