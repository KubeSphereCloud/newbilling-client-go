// Code generated by go-swagger; DO NOT EDIT.

package charging_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewChargingManagerListChargesParams creates a new ChargingManagerListChargesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewChargingManagerListChargesParams() *ChargingManagerListChargesParams {
	return &ChargingManagerListChargesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewChargingManagerListChargesParamsWithTimeout creates a new ChargingManagerListChargesParams object
// with the ability to set a timeout on a request.
func NewChargingManagerListChargesParamsWithTimeout(timeout time.Duration) *ChargingManagerListChargesParams {
	return &ChargingManagerListChargesParams{
		timeout: timeout,
	}
}

// NewChargingManagerListChargesParamsWithContext creates a new ChargingManagerListChargesParams object
// with the ability to set a context for a request.
func NewChargingManagerListChargesParamsWithContext(ctx context.Context) *ChargingManagerListChargesParams {
	return &ChargingManagerListChargesParams{
		Context: ctx,
	}
}

// NewChargingManagerListChargesParamsWithHTTPClient creates a new ChargingManagerListChargesParams object
// with the ability to set a custom HTTPClient for a request.
func NewChargingManagerListChargesParamsWithHTTPClient(client *http.Client) *ChargingManagerListChargesParams {
	return &ChargingManagerListChargesParams{
		HTTPClient: client,
	}
}

/*
ChargingManagerListChargesParams contains all the parameters to send to the API endpoint

	for the charging manager list charges operation.

	Typically these are written to a http.Request.
*/
type ChargingManagerListChargesParams struct {

	// ChargeStatus.
	ChargeStatus []string

	// ChargeTimeMax.
	//
	// Format: date-time
	ChargeTimeMax *strfmt.DateTime

	// ChargeTimeMin.
	//
	// Format: date-time
	ChargeTimeMin *strfmt.DateTime

	/* Limit.

	   数据库查询每页大小 - 默认 20, 最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Offset.

	   数据库查询偏移位置 - 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* PayType.

	   支付类型：charging  支付，recharge 充值.
	*/
	PayType []string

	/* ProdID.

	   prod_id.
	*/
	ProdID []string

	/* Reverse.

	   是否倒序排序 - value = 0 sort ASC, value = 1 sort DESC.
	*/
	Reverse *bool

	/* SearchWord.

	   模糊查询关键字.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	/* UserID.

	   客户ID.
	*/
	UserID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the charging manager list charges params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ChargingManagerListChargesParams) WithDefaults() *ChargingManagerListChargesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the charging manager list charges params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ChargingManagerListChargesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithTimeout(timeout time.Duration) *ChargingManagerListChargesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithContext(ctx context.Context) *ChargingManagerListChargesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithHTTPClient(client *http.Client) *ChargingManagerListChargesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChargeStatus adds the chargeStatus to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithChargeStatus(chargeStatus []string) *ChargingManagerListChargesParams {
	o.SetChargeStatus(chargeStatus)
	return o
}

// SetChargeStatus adds the chargeStatus to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetChargeStatus(chargeStatus []string) {
	o.ChargeStatus = chargeStatus
}

// WithChargeTimeMax adds the chargeTimeMax to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithChargeTimeMax(chargeTimeMax *strfmt.DateTime) *ChargingManagerListChargesParams {
	o.SetChargeTimeMax(chargeTimeMax)
	return o
}

// SetChargeTimeMax adds the chargeTimeMax to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetChargeTimeMax(chargeTimeMax *strfmt.DateTime) {
	o.ChargeTimeMax = chargeTimeMax
}

// WithChargeTimeMin adds the chargeTimeMin to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithChargeTimeMin(chargeTimeMin *strfmt.DateTime) *ChargingManagerListChargesParams {
	o.SetChargeTimeMin(chargeTimeMin)
	return o
}

// SetChargeTimeMin adds the chargeTimeMin to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetChargeTimeMin(chargeTimeMin *strfmt.DateTime) {
	o.ChargeTimeMin = chargeTimeMin
}

// WithLimit adds the limit to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithLimit(limit *string) *ChargingManagerListChargesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithOffset(offset *string) *ChargingManagerListChargesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithPayType adds the payType to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithPayType(payType []string) *ChargingManagerListChargesParams {
	o.SetPayType(payType)
	return o
}

// SetPayType adds the payType to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetPayType(payType []string) {
	o.PayType = payType
}

// WithProdID adds the prodID to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithProdID(prodID []string) *ChargingManagerListChargesParams {
	o.SetProdID(prodID)
	return o
}

// SetProdID adds the prodId to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetProdID(prodID []string) {
	o.ProdID = prodID
}

// WithReverse adds the reverse to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithReverse(reverse *bool) *ChargingManagerListChargesParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithSearchWord(searchWord *string) *ChargingManagerListChargesParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithSortKey(sortKey *string) *ChargingManagerListChargesParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithUserID adds the userID to the charging manager list charges params
func (o *ChargingManagerListChargesParams) WithUserID(userID []string) *ChargingManagerListChargesParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the charging manager list charges params
func (o *ChargingManagerListChargesParams) SetUserID(userID []string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *ChargingManagerListChargesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChargeStatus != nil {

		// binding items for charge_status
		joinedChargeStatus := o.bindParamChargeStatus(reg)

		// query array param charge_status
		if err := r.SetQueryParam("charge_status", joinedChargeStatus...); err != nil {
			return err
		}
	}

	if o.ChargeTimeMax != nil {

		// query param charge_time_max
		var qrChargeTimeMax strfmt.DateTime

		if o.ChargeTimeMax != nil {
			qrChargeTimeMax = *o.ChargeTimeMax
		}
		qChargeTimeMax := qrChargeTimeMax.String()
		if qChargeTimeMax != "" {

			if err := r.SetQueryParam("charge_time_max", qChargeTimeMax); err != nil {
				return err
			}
		}
	}

	if o.ChargeTimeMin != nil {

		// query param charge_time_min
		var qrChargeTimeMin strfmt.DateTime

		if o.ChargeTimeMin != nil {
			qrChargeTimeMin = *o.ChargeTimeMin
		}
		qChargeTimeMin := qrChargeTimeMin.String()
		if qChargeTimeMin != "" {

			if err := r.SetQueryParam("charge_time_min", qChargeTimeMin); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.PayType != nil {

		// binding items for pay_type
		joinedPayType := o.bindParamPayType(reg)

		// query array param pay_type
		if err := r.SetQueryParam("pay_type", joinedPayType...); err != nil {
			return err
		}
	}

	if o.ProdID != nil {

		// binding items for prod_id
		joinedProdID := o.bindParamProdID(reg)

		// query array param prod_id
		if err := r.SetQueryParam("prod_id", joinedProdID...); err != nil {
			return err
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// binding items for user_id
		joinedUserID := o.bindParamUserID(reg)

		// query array param user_id
		if err := r.SetQueryParam("user_id", joinedUserID...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamChargingManagerListCharges binds the parameter charge_status
func (o *ChargingManagerListChargesParams) bindParamChargeStatus(formats strfmt.Registry) []string {
	chargeStatusIR := o.ChargeStatus

	var chargeStatusIC []string
	for _, chargeStatusIIR := range chargeStatusIR { // explode []string

		chargeStatusIIV := chargeStatusIIR // string as string
		chargeStatusIC = append(chargeStatusIC, chargeStatusIIV)
	}

	// items.CollectionFormat: "multi"
	chargeStatusIS := swag.JoinByFormat(chargeStatusIC, "multi")

	return chargeStatusIS
}

// bindParamChargingManagerListCharges binds the parameter pay_type
func (o *ChargingManagerListChargesParams) bindParamPayType(formats strfmt.Registry) []string {
	payTypeIR := o.PayType

	var payTypeIC []string
	for _, payTypeIIR := range payTypeIR { // explode []string

		payTypeIIV := payTypeIIR // string as string
		payTypeIC = append(payTypeIC, payTypeIIV)
	}

	// items.CollectionFormat: "multi"
	payTypeIS := swag.JoinByFormat(payTypeIC, "multi")

	return payTypeIS
}

// bindParamChargingManagerListCharges binds the parameter prod_id
func (o *ChargingManagerListChargesParams) bindParamProdID(formats strfmt.Registry) []string {
	prodIDIR := o.ProdID

	var prodIDIC []string
	for _, prodIDIIR := range prodIDIR { // explode []string

		prodIDIIV := prodIDIIR // string as string
		prodIDIC = append(prodIDIC, prodIDIIV)
	}

	// items.CollectionFormat: "multi"
	prodIDIS := swag.JoinByFormat(prodIDIC, "multi")

	return prodIDIS
}

// bindParamChargingManagerListCharges binds the parameter user_id
func (o *ChargingManagerListChargesParams) bindParamUserID(formats strfmt.Registry) []string {
	userIDIR := o.UserID

	var userIDIC []string
	for _, userIDIIR := range userIDIR { // explode []string

		userIDIIV := userIDIIR // string as string
		userIDIC = append(userIDIC, userIDIIV)
	}

	// items.CollectionFormat: "multi"
	userIDIS := swag.JoinByFormat(userIDIC, "multi")

	return userIDIS
}
