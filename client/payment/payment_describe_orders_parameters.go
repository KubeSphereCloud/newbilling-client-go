// Code generated by go-swagger; DO NOT EDIT.

package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPaymentDescribeOrdersParams creates a new PaymentDescribeOrdersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPaymentDescribeOrdersParams() *PaymentDescribeOrdersParams {
	return &PaymentDescribeOrdersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPaymentDescribeOrdersParamsWithTimeout creates a new PaymentDescribeOrdersParams object
// with the ability to set a timeout on a request.
func NewPaymentDescribeOrdersParamsWithTimeout(timeout time.Duration) *PaymentDescribeOrdersParams {
	return &PaymentDescribeOrdersParams{
		timeout: timeout,
	}
}

// NewPaymentDescribeOrdersParamsWithContext creates a new PaymentDescribeOrdersParams object
// with the ability to set a context for a request.
func NewPaymentDescribeOrdersParamsWithContext(ctx context.Context) *PaymentDescribeOrdersParams {
	return &PaymentDescribeOrdersParams{
		Context: ctx,
	}
}

// NewPaymentDescribeOrdersParamsWithHTTPClient creates a new PaymentDescribeOrdersParams object
// with the ability to set a custom HTTPClient for a request.
func NewPaymentDescribeOrdersParamsWithHTTPClient(client *http.Client) *PaymentDescribeOrdersParams {
	return &PaymentDescribeOrdersParams{
		HTTPClient: client,
	}
}

/*
PaymentDescribeOrdersParams contains all the parameters to send to the API endpoint

	for the payment describe orders operation.

	Typically these are written to a http.Request.
*/
type PaymentDescribeOrdersParams struct {

	/* AccessSysID.

	   接入系统ID.
	*/
	AccessSysID *string

	/* Channel.

	   支付渠道.
	*/
	Channel []string

	/* Currency.

	   支付币种.
	*/
	Currency []string

	/* Limit.

	   数据库查询每页大小 - 默认 20, 最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Offset.

	   数据库查询偏移位置 - 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* OrderID.

	   支付订单ID.
	*/
	OrderID []string

	/* OutTradeNo.

	   接入系统方交易号.
	*/
	OutTradeNo []string

	/* Reverse.

	   是否倒序排序 - value = 0 sort ASC, value = 1 sort DESC.
	*/
	Reverse *bool

	/* SearchWord.

	   模糊查询关键字.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	/* Status.

	   支付状态.
	*/
	Status []string

	/* Subject.

	   商品标题.
	*/
	Subject []string

	/* TradeNo.

	   三方交易号.
	*/
	TradeNo []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the payment describe orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentDescribeOrdersParams) WithDefaults() *PaymentDescribeOrdersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the payment describe orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentDescribeOrdersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithTimeout(timeout time.Duration) *PaymentDescribeOrdersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithContext(ctx context.Context) *PaymentDescribeOrdersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithHTTPClient(client *http.Client) *PaymentDescribeOrdersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessSysID adds the accessSysID to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithAccessSysID(accessSysID *string) *PaymentDescribeOrdersParams {
	o.SetAccessSysID(accessSysID)
	return o
}

// SetAccessSysID adds the accessSysId to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetAccessSysID(accessSysID *string) {
	o.AccessSysID = accessSysID
}

// WithChannel adds the channel to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithChannel(channel []string) *PaymentDescribeOrdersParams {
	o.SetChannel(channel)
	return o
}

// SetChannel adds the channel to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetChannel(channel []string) {
	o.Channel = channel
}

// WithCurrency adds the currency to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithCurrency(currency []string) *PaymentDescribeOrdersParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetCurrency(currency []string) {
	o.Currency = currency
}

// WithLimit adds the limit to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithLimit(limit *string) *PaymentDescribeOrdersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithOffset(offset *string) *PaymentDescribeOrdersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithOrderID adds the orderID to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithOrderID(orderID []string) *PaymentDescribeOrdersParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetOrderID(orderID []string) {
	o.OrderID = orderID
}

// WithOutTradeNo adds the outTradeNo to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithOutTradeNo(outTradeNo []string) *PaymentDescribeOrdersParams {
	o.SetOutTradeNo(outTradeNo)
	return o
}

// SetOutTradeNo adds the outTradeNo to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetOutTradeNo(outTradeNo []string) {
	o.OutTradeNo = outTradeNo
}

// WithReverse adds the reverse to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithReverse(reverse *bool) *PaymentDescribeOrdersParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithSearchWord(searchWord *string) *PaymentDescribeOrdersParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithSortKey(sortKey *string) *PaymentDescribeOrdersParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStatus adds the status to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithStatus(status []string) *PaymentDescribeOrdersParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetStatus(status []string) {
	o.Status = status
}

// WithSubject adds the subject to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithSubject(subject []string) *PaymentDescribeOrdersParams {
	o.SetSubject(subject)
	return o
}

// SetSubject adds the subject to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetSubject(subject []string) {
	o.Subject = subject
}

// WithTradeNo adds the tradeNo to the payment describe orders params
func (o *PaymentDescribeOrdersParams) WithTradeNo(tradeNo []string) *PaymentDescribeOrdersParams {
	o.SetTradeNo(tradeNo)
	return o
}

// SetTradeNo adds the tradeNo to the payment describe orders params
func (o *PaymentDescribeOrdersParams) SetTradeNo(tradeNo []string) {
	o.TradeNo = tradeNo
}

// WriteToRequest writes these params to a swagger request
func (o *PaymentDescribeOrdersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessSysID != nil {

		// query param access_sys_id
		var qrAccessSysID string

		if o.AccessSysID != nil {
			qrAccessSysID = *o.AccessSysID
		}
		qAccessSysID := qrAccessSysID
		if qAccessSysID != "" {

			if err := r.SetQueryParam("access_sys_id", qAccessSysID); err != nil {
				return err
			}
		}
	}

	if o.Channel != nil {

		// binding items for channel
		joinedChannel := o.bindParamChannel(reg)

		// query array param channel
		if err := r.SetQueryParam("channel", joinedChannel...); err != nil {
			return err
		}
	}

	if o.Currency != nil {

		// binding items for currency
		joinedCurrency := o.bindParamCurrency(reg)

		// query array param currency
		if err := r.SetQueryParam("currency", joinedCurrency...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrderID != nil {

		// binding items for order_id
		joinedOrderID := o.bindParamOrderID(reg)

		// query array param order_id
		if err := r.SetQueryParam("order_id", joinedOrderID...); err != nil {
			return err
		}
	}

	if o.OutTradeNo != nil {

		// binding items for out_trade_no
		joinedOutTradeNo := o.bindParamOutTradeNo(reg)

		// query array param out_trade_no
		if err := r.SetQueryParam("out_trade_no", joinedOutTradeNo...); err != nil {
			return err
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// binding items for status
		joinedStatus := o.bindParamStatus(reg)

		// query array param status
		if err := r.SetQueryParam("status", joinedStatus...); err != nil {
			return err
		}
	}

	if o.Subject != nil {

		// binding items for subject
		joinedSubject := o.bindParamSubject(reg)

		// query array param subject
		if err := r.SetQueryParam("subject", joinedSubject...); err != nil {
			return err
		}
	}

	if o.TradeNo != nil {

		// binding items for trade_no
		joinedTradeNo := o.bindParamTradeNo(reg)

		// query array param trade_no
		if err := r.SetQueryParam("trade_no", joinedTradeNo...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPaymentDescribeOrders binds the parameter channel
func (o *PaymentDescribeOrdersParams) bindParamChannel(formats strfmt.Registry) []string {
	channelIR := o.Channel

	var channelIC []string
	for _, channelIIR := range channelIR { // explode []string

		channelIIV := channelIIR // string as string
		channelIC = append(channelIC, channelIIV)
	}

	// items.CollectionFormat: "multi"
	channelIS := swag.JoinByFormat(channelIC, "multi")

	return channelIS
}

// bindParamPaymentDescribeOrders binds the parameter currency
func (o *PaymentDescribeOrdersParams) bindParamCurrency(formats strfmt.Registry) []string {
	currencyIR := o.Currency

	var currencyIC []string
	for _, currencyIIR := range currencyIR { // explode []string

		currencyIIV := currencyIIR // string as string
		currencyIC = append(currencyIC, currencyIIV)
	}

	// items.CollectionFormat: "multi"
	currencyIS := swag.JoinByFormat(currencyIC, "multi")

	return currencyIS
}

// bindParamPaymentDescribeOrders binds the parameter order_id
func (o *PaymentDescribeOrdersParams) bindParamOrderID(formats strfmt.Registry) []string {
	orderIDIR := o.OrderID

	var orderIDIC []string
	for _, orderIDIIR := range orderIDIR { // explode []string

		orderIDIIV := orderIDIIR // string as string
		orderIDIC = append(orderIDIC, orderIDIIV)
	}

	// items.CollectionFormat: "multi"
	orderIDIS := swag.JoinByFormat(orderIDIC, "multi")

	return orderIDIS
}

// bindParamPaymentDescribeOrders binds the parameter out_trade_no
func (o *PaymentDescribeOrdersParams) bindParamOutTradeNo(formats strfmt.Registry) []string {
	outTradeNoIR := o.OutTradeNo

	var outTradeNoIC []string
	for _, outTradeNoIIR := range outTradeNoIR { // explode []string

		outTradeNoIIV := outTradeNoIIR // string as string
		outTradeNoIC = append(outTradeNoIC, outTradeNoIIV)
	}

	// items.CollectionFormat: "multi"
	outTradeNoIS := swag.JoinByFormat(outTradeNoIC, "multi")

	return outTradeNoIS
}

// bindParamPaymentDescribeOrders binds the parameter status
func (o *PaymentDescribeOrdersParams) bindParamStatus(formats strfmt.Registry) []string {
	statusIR := o.Status

	var statusIC []string
	for _, statusIIR := range statusIR { // explode []string

		statusIIV := statusIIR // string as string
		statusIC = append(statusIC, statusIIV)
	}

	// items.CollectionFormat: "multi"
	statusIS := swag.JoinByFormat(statusIC, "multi")

	return statusIS
}

// bindParamPaymentDescribeOrders binds the parameter subject
func (o *PaymentDescribeOrdersParams) bindParamSubject(formats strfmt.Registry) []string {
	subjectIR := o.Subject

	var subjectIC []string
	for _, subjectIIR := range subjectIR { // explode []string

		subjectIIV := subjectIIR // string as string
		subjectIC = append(subjectIC, subjectIIV)
	}

	// items.CollectionFormat: "multi"
	subjectIS := swag.JoinByFormat(subjectIC, "multi")

	return subjectIS
}

// bindParamPaymentDescribeOrders binds the parameter trade_no
func (o *PaymentDescribeOrdersParams) bindParamTradeNo(formats strfmt.Registry) []string {
	tradeNoIR := o.TradeNo

	var tradeNoIC []string
	for _, tradeNoIIR := range tradeNoIR { // explode []string

		tradeNoIIV := tradeNoIIR // string as string
		tradeNoIC = append(tradeNoIC, tradeNoIIV)
	}

	// items.CollectionFormat: "multi"
	tradeNoIS := swag.JoinByFormat(tradeNoIC, "multi")

	return tradeNoIS
}
