// Code generated by go-swagger; DO NOT EDIT.

package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PaymentCreateOrder(params *PaymentCreateOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentCreateOrderOK, error)

	PaymentDescribeOrders(params *PaymentDescribeOrdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentDescribeOrdersOK, error)

	PaymentGetOrder(params *PaymentGetOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentGetOrderOK, error)

	PaymentPrepayAlipayApp(params *PaymentPrepayAlipayAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentPrepayAlipayAppOK, error)

	PaymentPrepayAlipayNative(params *PaymentPrepayAlipayNativeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentPrepayAlipayNativeOK, error)

	PaymentPrepayStripe(params *PaymentPrepayStripeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentPrepayStripeOK, error)

	PaymentPrepayWxpayNative(params *PaymentPrepayWxpayNativeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentPrepayWxpayNativeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PaymentCreateOrder 支付订单s 创建
*/
func (a *Client) PaymentCreateOrder(params *PaymentCreateOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentCreateOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentCreateOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payment_CreateOrder",
		Method:             "POST",
		PathPattern:        "/v1/payment/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PaymentCreateOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentCreateOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentCreateOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentDescribeOrders 支付订单s 列表
*/
func (a *Client) PaymentDescribeOrders(params *PaymentDescribeOrdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentDescribeOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentDescribeOrdersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payment_DescribeOrders",
		Method:             "GET",
		PathPattern:        "/v1/payment/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PaymentDescribeOrdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentDescribeOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentDescribeOrdersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentGetOrder 支付订单s 详情
*/
func (a *Client) PaymentGetOrder(params *PaymentGetOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentGetOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentGetOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payment_GetOrder",
		Method:             "GET",
		PathPattern:        "/v1/payment/orders/{query_no}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PaymentGetOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentGetOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentGetOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentPrepayAlipayApp 支付宝app支付用接口s 获取支付宝支付二维码
*/
func (a *Client) PaymentPrepayAlipayApp(params *PaymentPrepayAlipayAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentPrepayAlipayAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentPrepayAlipayAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payment_PrepayAlipayApp",
		Method:             "POST",
		PathPattern:        "/v1/prepay/alipay/app",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PaymentPrepayAlipayAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentPrepayAlipayAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentPrepayAlipayAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentPrepayAlipayNative 支付宝app支付用接口s 获取支付宝收款码
*/
func (a *Client) PaymentPrepayAlipayNative(params *PaymentPrepayAlipayNativeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentPrepayAlipayNativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentPrepayAlipayNativeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payment_PrepayAlipayNative",
		Method:             "POST",
		PathPattern:        "/v1/prepay/alipay/native",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PaymentPrepayAlipayNativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentPrepayAlipayNativeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentPrepayAlipayNativeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentPrepayStripe stripe支付用接口s 获取stripe支付凭证
*/
func (a *Client) PaymentPrepayStripe(params *PaymentPrepayStripeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentPrepayStripeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentPrepayStripeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payment_PrepayStripe",
		Method:             "POST",
		PathPattern:        "/v1/prepay/stripe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PaymentPrepayStripeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentPrepayStripeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentPrepayStripeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PaymentPrepayWxpayNative 微信s native支付用接口 获取微信支付二维码
*/
func (a *Client) PaymentPrepayWxpayNative(params *PaymentPrepayWxpayNativeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PaymentPrepayWxpayNativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentPrepayWxpayNativeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Payment_PrepayWxpayNative",
		Method:             "POST",
		PathPattern:        "/v1/prepay/wxpay/native",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PaymentPrepayWxpayNativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentPrepayWxpayNativeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PaymentPrepayWxpayNativeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
