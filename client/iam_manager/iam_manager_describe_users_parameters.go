// Code generated by go-swagger; DO NOT EDIT.

package iam_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIamManagerDescribeUsersParams creates a new IamManagerDescribeUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIamManagerDescribeUsersParams() *IamManagerDescribeUsersParams {
	return &IamManagerDescribeUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIamManagerDescribeUsersParamsWithTimeout creates a new IamManagerDescribeUsersParams object
// with the ability to set a timeout on a request.
func NewIamManagerDescribeUsersParamsWithTimeout(timeout time.Duration) *IamManagerDescribeUsersParams {
	return &IamManagerDescribeUsersParams{
		timeout: timeout,
	}
}

// NewIamManagerDescribeUsersParamsWithContext creates a new IamManagerDescribeUsersParams object
// with the ability to set a context for a request.
func NewIamManagerDescribeUsersParamsWithContext(ctx context.Context) *IamManagerDescribeUsersParams {
	return &IamManagerDescribeUsersParams{
		Context: ctx,
	}
}

// NewIamManagerDescribeUsersParamsWithHTTPClient creates a new IamManagerDescribeUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewIamManagerDescribeUsersParamsWithHTTPClient(client *http.Client) *IamManagerDescribeUsersParams {
	return &IamManagerDescribeUsersParams{
		HTTPClient: client,
	}
}

/*
IamManagerDescribeUsersParams contains all the parameters to send to the API endpoint

	for the iam manager describe users operation.

	Typically these are written to a http.Request.
*/
type IamManagerDescribeUsersParams struct {

	// AccessSysGroup.
	AccessSysGroup *string

	/* Email.

	   用户邮件-帐号.
	*/
	Email []string

	/* Limit.

	   数据库查询每页大小 - 默认 20, 最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Offset.

	   数据库查询偏移位置 - 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* Phone.

	   手机号.
	*/
	Phone []string

	/* Reverse.

	   是否倒序排序 - value = 0 sort ASC, value = 1 sort DESC.
	*/
	Reverse *bool

	/* RoleID.

	   用户角色ID.
	*/
	RoleID []string

	/* SearchWord.

	   模糊查询关键字 - 支持字段：user_id/email/phone.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	// Status.
	//
	// Format: int64
	Status *int64

	/* UserID.

	   用户ID.
	*/
	UserID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the iam manager describe users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IamManagerDescribeUsersParams) WithDefaults() *IamManagerDescribeUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the iam manager describe users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IamManagerDescribeUsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithTimeout(timeout time.Duration) *IamManagerDescribeUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithContext(ctx context.Context) *IamManagerDescribeUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithHTTPClient(client *http.Client) *IamManagerDescribeUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessSysGroup adds the accessSysGroup to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithAccessSysGroup(accessSysGroup *string) *IamManagerDescribeUsersParams {
	o.SetAccessSysGroup(accessSysGroup)
	return o
}

// SetAccessSysGroup adds the accessSysGroup to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetAccessSysGroup(accessSysGroup *string) {
	o.AccessSysGroup = accessSysGroup
}

// WithEmail adds the email to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithEmail(email []string) *IamManagerDescribeUsersParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetEmail(email []string) {
	o.Email = email
}

// WithLimit adds the limit to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithLimit(limit *string) *IamManagerDescribeUsersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithOffset(offset *string) *IamManagerDescribeUsersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithPhone adds the phone to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithPhone(phone []string) *IamManagerDescribeUsersParams {
	o.SetPhone(phone)
	return o
}

// SetPhone adds the phone to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetPhone(phone []string) {
	o.Phone = phone
}

// WithReverse adds the reverse to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithReverse(reverse *bool) *IamManagerDescribeUsersParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithRoleID adds the roleID to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithRoleID(roleID []string) *IamManagerDescribeUsersParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetRoleID(roleID []string) {
	o.RoleID = roleID
}

// WithSearchWord adds the searchWord to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithSearchWord(searchWord *string) *IamManagerDescribeUsersParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithSortKey(sortKey *string) *IamManagerDescribeUsersParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStatus adds the status to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithStatus(status *int64) *IamManagerDescribeUsersParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetStatus(status *int64) {
	o.Status = status
}

// WithUserID adds the userID to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) WithUserID(userID []string) *IamManagerDescribeUsersParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the iam manager describe users params
func (o *IamManagerDescribeUsersParams) SetUserID(userID []string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *IamManagerDescribeUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessSysGroup != nil {

		// query param access_sys_group
		var qrAccessSysGroup string

		if o.AccessSysGroup != nil {
			qrAccessSysGroup = *o.AccessSysGroup
		}
		qAccessSysGroup := qrAccessSysGroup
		if qAccessSysGroup != "" {

			if err := r.SetQueryParam("access_sys_group", qAccessSysGroup); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// binding items for email
		joinedEmail := o.bindParamEmail(reg)

		// query array param email
		if err := r.SetQueryParam("email", joinedEmail...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Phone != nil {

		// binding items for phone
		joinedPhone := o.bindParamPhone(reg)

		// query array param phone
		if err := r.SetQueryParam("phone", joinedPhone...); err != nil {
			return err
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.RoleID != nil {

		// binding items for role_id
		joinedRoleID := o.bindParamRoleID(reg)

		// query array param role_id
		if err := r.SetQueryParam("role_id", joinedRoleID...); err != nil {
			return err
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus int64

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := swag.FormatInt64(qrStatus)
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// binding items for user_id
		joinedUserID := o.bindParamUserID(reg)

		// query array param user_id
		if err := r.SetQueryParam("user_id", joinedUserID...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamIamManagerDescribeUsers binds the parameter email
func (o *IamManagerDescribeUsersParams) bindParamEmail(formats strfmt.Registry) []string {
	emailIR := o.Email

	var emailIC []string
	for _, emailIIR := range emailIR { // explode []string

		emailIIV := emailIIR // string as string
		emailIC = append(emailIC, emailIIV)
	}

	// items.CollectionFormat: "multi"
	emailIS := swag.JoinByFormat(emailIC, "multi")

	return emailIS
}

// bindParamIamManagerDescribeUsers binds the parameter phone
func (o *IamManagerDescribeUsersParams) bindParamPhone(formats strfmt.Registry) []string {
	phoneIR := o.Phone

	var phoneIC []string
	for _, phoneIIR := range phoneIR { // explode []string

		phoneIIV := phoneIIR // string as string
		phoneIC = append(phoneIC, phoneIIV)
	}

	// items.CollectionFormat: "multi"
	phoneIS := swag.JoinByFormat(phoneIC, "multi")

	return phoneIS
}

// bindParamIamManagerDescribeUsers binds the parameter role_id
func (o *IamManagerDescribeUsersParams) bindParamRoleID(formats strfmt.Registry) []string {
	roleIDIR := o.RoleID

	var roleIDIC []string
	for _, roleIDIIR := range roleIDIR { // explode []string

		roleIDIIV := roleIDIIR // string as string
		roleIDIC = append(roleIDIC, roleIDIIV)
	}

	// items.CollectionFormat: "multi"
	roleIDIS := swag.JoinByFormat(roleIDIC, "multi")

	return roleIDIS
}

// bindParamIamManagerDescribeUsers binds the parameter user_id
func (o *IamManagerDescribeUsersParams) bindParamUserID(formats strfmt.Registry) []string {
	userIDIR := o.UserID

	var userIDIC []string
	for _, userIDIIR := range userIDIR { // explode []string

		userIDIIV := userIDIIR // string as string
		userIDIC = append(userIDIC, userIDIIV)
	}

	// items.CollectionFormat: "multi"
	userIDIS := swag.JoinByFormat(userIDIC, "multi")

	return userIDIS
}
