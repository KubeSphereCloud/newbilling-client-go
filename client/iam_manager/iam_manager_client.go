// Code generated by go-swagger; DO NOT EDIT.

package iam_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new iam manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for iam manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	IamManagerBindingMembersRoles(params *IamManagerBindingMembersRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerBindingMembersRolesOK, error)

	IamManagerBindingRoleAction(params *IamManagerBindingRoleActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerBindingRoleActionOK, error)

	IamManagerBindingRolesMembers(params *IamManagerBindingRolesMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerBindingRolesMembersOK, error)

	IamManagerChangePassword(params *IamManagerChangePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerChangePasswordOK, error)

	IamManagerCreateAction(params *IamManagerCreateActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerCreateActionOK, error)

	IamManagerCreateRole(params *IamManagerCreateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerCreateRoleOK, error)

	IamManagerCreateUser(params *IamManagerCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerCreateUserOK, error)

	IamManagerDeleteAction(params *IamManagerDeleteActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDeleteActionOK, error)

	IamManagerDeleteRole(params *IamManagerDeleteRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDeleteRoleOK, error)

	IamManagerDeleteUnactivityAccessSystemUser(params *IamManagerDeleteUnactivityAccessSystemUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDeleteUnactivityAccessSystemUserOK, error)

	IamManagerDescribeActions(params *IamManagerDescribeActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeActionsOK, error)

	IamManagerDescribeAPIIds(params *IamManagerDescribeAPIIdsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeAPIIdsOK, error)

	IamManagerDescribeMembers(params *IamManagerDescribeMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeMembersOK, error)

	IamManagerDescribeRoles(params *IamManagerDescribeRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeRolesOK, error)

	IamManagerDescribeToken(params *IamManagerDescribeTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeTokenOK, error)

	IamManagerDescribeUserAccessSystems(params *IamManagerDescribeUserAccessSystemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeUserAccessSystemsOK, error)

	IamManagerDescribeUsers(params *IamManagerDescribeUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeUsersOK, error)

	IamManagerInviteUser(params *IamManagerInviteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerInviteUserOK, error)

	IamManagerLogin(params *IamManagerLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerLoginOK, error)

	IamManagerLogout(params *IamManagerLogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerLogoutOK, error)

	IamManagerModifyAccessSystemUser(params *IamManagerModifyAccessSystemUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerModifyAccessSystemUserOK, error)

	IamManagerModifyAction(params *IamManagerModifyActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerModifyActionOK, error)

	IamManagerModifyRole(params *IamManagerModifyRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerModifyRoleOK, error)

	IamManagerModifyUser(params *IamManagerModifyUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerModifyUserOK, error)

	IamManagerRefreshOpenAPIToken(params *IamManagerRefreshOpenAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerRefreshOpenAPITokenOK, error)

	IamManagerRefreshToken(params *IamManagerRefreshTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerRefreshTokenOK, error)

	IamManagerResetPassword(params *IamManagerResetPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerResetPasswordOK, error)

	IamManagerResetPwdSendEmail(params *IamManagerResetPwdSendEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerResetPwdSendEmailOK, error)

	IamManagerRoleDetail(params *IamManagerRoleDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerRoleDetailOK, error)

	IamManagerSwitchAccessSys(params *IamManagerSwitchAccessSysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerSwitchAccessSysOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
IamManagerBindingMembersRoles 成员s 角色 绑定
*/
func (a *Client) IamManagerBindingMembersRoles(params *IamManagerBindingMembersRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerBindingMembersRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerBindingMembersRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_BindingMembersRoles",
		Method:             "POST",
		PathPattern:        "/v1/member_role_bindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerBindingMembersRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerBindingMembersRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerBindingMembersRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerBindingRoleAction 角色s API 绑定
*/
func (a *Client) IamManagerBindingRoleAction(params *IamManagerBindingRoleActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerBindingRoleActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerBindingRoleActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_BindingRoleAction",
		Method:             "POST",
		PathPattern:        "/v1/role_action_bindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerBindingRoleActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerBindingRoleActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerBindingRoleActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerBindingRolesMembers 角色s 成员 绑定
*/
func (a *Client) IamManagerBindingRolesMembers(params *IamManagerBindingRolesMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerBindingRolesMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerBindingRolesMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_BindingRolesMembers",
		Method:             "POST",
		PathPattern:        "/v1/role_member_bindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerBindingRolesMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerBindingRolesMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerBindingRolesMembersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerChangePassword 密码s 修改
*/
func (a *Client) IamManagerChangePassword(params *IamManagerChangePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerChangePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_ChangePassword",
		Method:             "PUT",
		PathPattern:        "/v1/users/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerChangePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerChangePasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerCreateAction APIs 创建
*/
func (a *Client) IamManagerCreateAction(params *IamManagerCreateActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerCreateActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerCreateActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_CreateAction",
		Method:             "POST",
		PathPattern:        "/v1/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerCreateActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerCreateActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerCreateActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerCreateRole 角色s 创建
*/
func (a *Client) IamManagerCreateRole(params *IamManagerCreateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerCreateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerCreateRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_CreateRole",
		Method:             "POST",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerCreateRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerCreateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerCreateRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerCreateUser 用户s 创建
*/
func (a *Client) IamManagerCreateUser(params *IamManagerCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_CreateUser",
		Method:             "POST",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerCreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerCreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDeleteAction APIs 删除
*/
func (a *Client) IamManagerDeleteAction(params *IamManagerDeleteActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDeleteActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDeleteActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DeleteAction",
		Method:             "DELETE",
		PathPattern:        "/v1/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDeleteActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDeleteActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDeleteActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDeleteRole 角色s 删除
*/
func (a *Client) IamManagerDeleteRole(params *IamManagerDeleteRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDeleteRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDeleteRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DeleteRole",
		Method:             "DELETE",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDeleteRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDeleteRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDeleteRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDeleteUnactivityAccessSystemUser 接入系统成员s 删除未激活
*/
func (a *Client) IamManagerDeleteUnactivityAccessSystemUser(params *IamManagerDeleteUnactivityAccessSystemUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDeleteUnactivityAccessSystemUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDeleteUnactivityAccessSystemUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DeleteUnactivityAccessSystemUser",
		Method:             "DELETE",
		PathPattern:        "/v1/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDeleteUnactivityAccessSystemUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDeleteUnactivityAccessSystemUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDeleteUnactivityAccessSystemUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDescribeActions APIs 列表
*/
func (a *Client) IamManagerDescribeActions(params *IamManagerDescribeActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDescribeActionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DescribeActions",
		Method:             "GET",
		PathPattern:        "/v1/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDescribeActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDescribeActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDescribeActionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDescribeAPIIds 角色s API 列表
*/
func (a *Client) IamManagerDescribeAPIIds(params *IamManagerDescribeAPIIdsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeAPIIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDescribeAPIIdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DescribeApiIds",
		Method:             "GET",
		PathPattern:        "/v1/users/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDescribeAPIIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDescribeAPIIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDescribeAPIIdsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDescribeMembers 接入系统成员s 列表
*/
func (a *Client) IamManagerDescribeMembers(params *IamManagerDescribeMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDescribeMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DescribeMembers",
		Method:             "GET",
		PathPattern:        "/v1/accesssystems/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDescribeMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDescribeMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDescribeMembersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDescribeRoles 角色s 列表
*/
func (a *Client) IamManagerDescribeRoles(params *IamManagerDescribeRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDescribeRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DescribeRoles",
		Method:             "GET",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDescribeRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDescribeRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDescribeRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDescribeToken ts o k e n 获取
*/
func (a *Client) IamManagerDescribeToken(params *IamManagerDescribeTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDescribeTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DescribeToken",
		Method:             "GET",
		PathPattern:        "/v1/users/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDescribeTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDescribeTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDescribeTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDescribeUserAccessSystems 用户的接入系统s 查询
*/
func (a *Client) IamManagerDescribeUserAccessSystems(params *IamManagerDescribeUserAccessSystemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeUserAccessSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDescribeUserAccessSystemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DescribeUserAccessSystems",
		Method:             "GET",
		PathPattern:        "/v1/users/accesssystems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDescribeUserAccessSystemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDescribeUserAccessSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDescribeUserAccessSystemsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerDescribeUsers 用户s 列表
*/
func (a *Client) IamManagerDescribeUsers(params *IamManagerDescribeUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerDescribeUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerDescribeUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_DescribeUsers",
		Method:             "GET",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerDescribeUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerDescribeUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerDescribeUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerInviteUser 用户s 邀请
*/
func (a *Client) IamManagerInviteUser(params *IamManagerInviteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerInviteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerInviteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_InviteUser",
		Method:             "POST",
		PathPattern:        "/v1/users:invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerInviteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerInviteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerInviteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerLogin 登录s
*/
func (a *Client) IamManagerLogin(params *IamManagerLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_Login",
		Method:             "POST",
		PathPattern:        "/v1/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerLogout 退出登录s
*/
func (a *Client) IamManagerLogout(params *IamManagerLogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_Logout",
		Method:             "POST",
		PathPattern:        "/v1/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerLogoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerLogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerLogoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerModifyAccessSystemUser 接入系统成员s 修改
*/
func (a *Client) IamManagerModifyAccessSystemUser(params *IamManagerModifyAccessSystemUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerModifyAccessSystemUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerModifyAccessSystemUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_ModifyAccessSystemUser",
		Method:             "PATCH",
		PathPattern:        "/v1/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerModifyAccessSystemUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerModifyAccessSystemUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerModifyAccessSystemUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerModifyAction APIs 修改
*/
func (a *Client) IamManagerModifyAction(params *IamManagerModifyActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerModifyActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerModifyActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_ModifyAction",
		Method:             "PATCH",
		PathPattern:        "/v1/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerModifyActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerModifyActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerModifyActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerModifyRole 角色s 修改
*/
func (a *Client) IamManagerModifyRole(params *IamManagerModifyRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerModifyRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerModifyRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_ModifyRole",
		Method:             "PATCH",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerModifyRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerModifyRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerModifyRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerModifyUser 用户s 修改
*/
func (a *Client) IamManagerModifyUser(params *IamManagerModifyUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerModifyUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerModifyUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_ModifyUser",
		Method:             "PATCH",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerModifyUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerModifyUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerModifyUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerRefreshOpenAPIToken 外部通用接口s 提供给接入系统对接使用的刷新token的接口
*/
func (a *Client) IamManagerRefreshOpenAPIToken(params *IamManagerRefreshOpenAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerRefreshOpenAPITokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerRefreshOpenAPITokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_RefreshOpenApiToken",
		Method:             "POST",
		PathPattern:        "/v1/openapi/token:refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerRefreshOpenAPITokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerRefreshOpenAPITokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerRefreshOpenAPITokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerRefreshToken ts o k e n 刷新
*/
func (a *Client) IamManagerRefreshToken(params *IamManagerRefreshTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerRefreshTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerRefreshTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_RefreshToken",
		Method:             "POST",
		PathPattern:        "/v1/users/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerRefreshTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerRefreshTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerRefreshTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerResetPassword 密码s 重置
*/
func (a *Client) IamManagerResetPassword(params *IamManagerResetPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerResetPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerResetPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_ResetPassword",
		Method:             "POST",
		PathPattern:        "/v1/users/password:reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerResetPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerResetPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerResetPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerResetPwdSendEmail 密码s 重置 发送邮件
*/
func (a *Client) IamManagerResetPwdSendEmail(params *IamManagerResetPwdSendEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerResetPwdSendEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerResetPwdSendEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_ResetPwdSendEmail",
		Method:             "POST",
		PathPattern:        "/v1/users/password/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerResetPwdSendEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerResetPwdSendEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerResetPwdSendEmailDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerRoleDetail 角色s 详情
*/
func (a *Client) IamManagerRoleDetail(params *IamManagerRoleDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerRoleDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerRoleDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_RoleDetail",
		Method:             "GET",
		PathPattern:        "/v1/roles/{role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerRoleDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerRoleDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerRoleDetailDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IamManagerSwitchAccessSys 用户的接入系统s 切换
*/
func (a *Client) IamManagerSwitchAccessSys(params *IamManagerSwitchAccessSysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IamManagerSwitchAccessSysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIamManagerSwitchAccessSysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IamManager_SwitchAccessSys",
		Method:             "POST",
		PathPattern:        "/v1/accesssystems:switch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IamManagerSwitchAccessSysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IamManagerSwitchAccessSysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IamManagerSwitchAccessSysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
