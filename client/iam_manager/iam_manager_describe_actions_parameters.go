// Code generated by go-swagger; DO NOT EDIT.

package iam_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIamManagerDescribeActionsParams creates a new IamManagerDescribeActionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIamManagerDescribeActionsParams() *IamManagerDescribeActionsParams {
	return &IamManagerDescribeActionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIamManagerDescribeActionsParamsWithTimeout creates a new IamManagerDescribeActionsParams object
// with the ability to set a timeout on a request.
func NewIamManagerDescribeActionsParamsWithTimeout(timeout time.Duration) *IamManagerDescribeActionsParams {
	return &IamManagerDescribeActionsParams{
		timeout: timeout,
	}
}

// NewIamManagerDescribeActionsParamsWithContext creates a new IamManagerDescribeActionsParams object
// with the ability to set a context for a request.
func NewIamManagerDescribeActionsParamsWithContext(ctx context.Context) *IamManagerDescribeActionsParams {
	return &IamManagerDescribeActionsParams{
		Context: ctx,
	}
}

// NewIamManagerDescribeActionsParamsWithHTTPClient creates a new IamManagerDescribeActionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewIamManagerDescribeActionsParamsWithHTTPClient(client *http.Client) *IamManagerDescribeActionsParams {
	return &IamManagerDescribeActionsParams{
		HTTPClient: client,
	}
}

/*
IamManagerDescribeActionsParams contains all the parameters to send to the API endpoint

	for the iam manager describe actions operation.

	Typically these are written to a http.Request.
*/
type IamManagerDescribeActionsParams struct {

	/* ActionID.

	   操作信息ID.
	*/
	ActionID []string

	/* ActionType.

	   操作信息-API类型- value = read 只读, value = write 只写,  value = delete 删除,  value = modify 修改.
	*/
	ActionType []string

	/* APIID.

	   操作信息-API ID.
	*/
	APIID []string

	/* APIName.

	   操作信息-API名称.
	*/
	APIName []string

	/* Limit.

	   数据库查询每页大小 - 默认 20, 最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* ModuleID.

	   操作信息-模块ID.
	*/
	ModuleID []string

	/* ModuleName.

	   操作信息-模块名称.
	*/
	ModuleName []string

	/* Offset.

	   数据库查询偏移位置 - 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* Reverse.

	   是否倒序排序 - value = 0 sort ASC, value = 1 sort DESC.
	*/
	Reverse *bool

	/* RoleID.

	   角色ID.
	*/
	RoleID []string

	/* SearchWord.

	   模糊查询关键字 - 支持字段：action_id/api_id/api_name/action_type.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the iam manager describe actions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IamManagerDescribeActionsParams) WithDefaults() *IamManagerDescribeActionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the iam manager describe actions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IamManagerDescribeActionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithTimeout(timeout time.Duration) *IamManagerDescribeActionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithContext(ctx context.Context) *IamManagerDescribeActionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithHTTPClient(client *http.Client) *IamManagerDescribeActionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionID adds the actionID to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithActionID(actionID []string) *IamManagerDescribeActionsParams {
	o.SetActionID(actionID)
	return o
}

// SetActionID adds the actionId to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetActionID(actionID []string) {
	o.ActionID = actionID
}

// WithActionType adds the actionType to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithActionType(actionType []string) *IamManagerDescribeActionsParams {
	o.SetActionType(actionType)
	return o
}

// SetActionType adds the actionType to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetActionType(actionType []string) {
	o.ActionType = actionType
}

// WithAPIID adds the aPIID to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithAPIID(aPIID []string) *IamManagerDescribeActionsParams {
	o.SetAPIID(aPIID)
	return o
}

// SetAPIID adds the apiId to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetAPIID(aPIID []string) {
	o.APIID = aPIID
}

// WithAPIName adds the aPIName to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithAPIName(aPIName []string) *IamManagerDescribeActionsParams {
	o.SetAPIName(aPIName)
	return o
}

// SetAPIName adds the apiName to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetAPIName(aPIName []string) {
	o.APIName = aPIName
}

// WithLimit adds the limit to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithLimit(limit *string) *IamManagerDescribeActionsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithModuleID adds the moduleID to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithModuleID(moduleID []string) *IamManagerDescribeActionsParams {
	o.SetModuleID(moduleID)
	return o
}

// SetModuleID adds the moduleId to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetModuleID(moduleID []string) {
	o.ModuleID = moduleID
}

// WithModuleName adds the moduleName to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithModuleName(moduleName []string) *IamManagerDescribeActionsParams {
	o.SetModuleName(moduleName)
	return o
}

// SetModuleName adds the moduleName to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetModuleName(moduleName []string) {
	o.ModuleName = moduleName
}

// WithOffset adds the offset to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithOffset(offset *string) *IamManagerDescribeActionsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithReverse adds the reverse to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithReverse(reverse *bool) *IamManagerDescribeActionsParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithRoleID adds the roleID to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithRoleID(roleID []string) *IamManagerDescribeActionsParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetRoleID(roleID []string) {
	o.RoleID = roleID
}

// WithSearchWord adds the searchWord to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithSearchWord(searchWord *string) *IamManagerDescribeActionsParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) WithSortKey(sortKey *string) *IamManagerDescribeActionsParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the iam manager describe actions params
func (o *IamManagerDescribeActionsParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WriteToRequest writes these params to a swagger request
func (o *IamManagerDescribeActionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActionID != nil {

		// binding items for action_id
		joinedActionID := o.bindParamActionID(reg)

		// query array param action_id
		if err := r.SetQueryParam("action_id", joinedActionID...); err != nil {
			return err
		}
	}

	if o.ActionType != nil {

		// binding items for action_type
		joinedActionType := o.bindParamActionType(reg)

		// query array param action_type
		if err := r.SetQueryParam("action_type", joinedActionType...); err != nil {
			return err
		}
	}

	if o.APIID != nil {

		// binding items for api_id
		joinedAPIID := o.bindParamAPIID(reg)

		// query array param api_id
		if err := r.SetQueryParam("api_id", joinedAPIID...); err != nil {
			return err
		}
	}

	if o.APIName != nil {

		// binding items for api_name
		joinedAPIName := o.bindParamAPIName(reg)

		// query array param api_name
		if err := r.SetQueryParam("api_name", joinedAPIName...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.ModuleID != nil {

		// binding items for module_id
		joinedModuleID := o.bindParamModuleID(reg)

		// query array param module_id
		if err := r.SetQueryParam("module_id", joinedModuleID...); err != nil {
			return err
		}
	}

	if o.ModuleName != nil {

		// binding items for module_name
		joinedModuleName := o.bindParamModuleName(reg)

		// query array param module_name
		if err := r.SetQueryParam("module_name", joinedModuleName...); err != nil {
			return err
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.RoleID != nil {

		// binding items for role_id
		joinedRoleID := o.bindParamRoleID(reg)

		// query array param role_id
		if err := r.SetQueryParam("role_id", joinedRoleID...); err != nil {
			return err
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamIamManagerDescribeActions binds the parameter action_id
func (o *IamManagerDescribeActionsParams) bindParamActionID(formats strfmt.Registry) []string {
	actionIDIR := o.ActionID

	var actionIDIC []string
	for _, actionIDIIR := range actionIDIR { // explode []string

		actionIDIIV := actionIDIIR // string as string
		actionIDIC = append(actionIDIC, actionIDIIV)
	}

	// items.CollectionFormat: "multi"
	actionIDIS := swag.JoinByFormat(actionIDIC, "multi")

	return actionIDIS
}

// bindParamIamManagerDescribeActions binds the parameter action_type
func (o *IamManagerDescribeActionsParams) bindParamActionType(formats strfmt.Registry) []string {
	actionTypeIR := o.ActionType

	var actionTypeIC []string
	for _, actionTypeIIR := range actionTypeIR { // explode []string

		actionTypeIIV := actionTypeIIR // string as string
		actionTypeIC = append(actionTypeIC, actionTypeIIV)
	}

	// items.CollectionFormat: "multi"
	actionTypeIS := swag.JoinByFormat(actionTypeIC, "multi")

	return actionTypeIS
}

// bindParamIamManagerDescribeActions binds the parameter api_id
func (o *IamManagerDescribeActionsParams) bindParamAPIID(formats strfmt.Registry) []string {
	aPIIDIR := o.APIID

	var aPIIDIC []string
	for _, aPIIDIIR := range aPIIDIR { // explode []string

		aPIIDIIV := aPIIDIIR // string as string
		aPIIDIC = append(aPIIDIC, aPIIDIIV)
	}

	// items.CollectionFormat: "multi"
	aPIIDIS := swag.JoinByFormat(aPIIDIC, "multi")

	return aPIIDIS
}

// bindParamIamManagerDescribeActions binds the parameter api_name
func (o *IamManagerDescribeActionsParams) bindParamAPIName(formats strfmt.Registry) []string {
	aPINameIR := o.APIName

	var aPINameIC []string
	for _, aPINameIIR := range aPINameIR { // explode []string

		aPINameIIV := aPINameIIR // string as string
		aPINameIC = append(aPINameIC, aPINameIIV)
	}

	// items.CollectionFormat: "multi"
	aPINameIS := swag.JoinByFormat(aPINameIC, "multi")

	return aPINameIS
}

// bindParamIamManagerDescribeActions binds the parameter module_id
func (o *IamManagerDescribeActionsParams) bindParamModuleID(formats strfmt.Registry) []string {
	moduleIDIR := o.ModuleID

	var moduleIDIC []string
	for _, moduleIDIIR := range moduleIDIR { // explode []string

		moduleIDIIV := moduleIDIIR // string as string
		moduleIDIC = append(moduleIDIC, moduleIDIIV)
	}

	// items.CollectionFormat: "multi"
	moduleIDIS := swag.JoinByFormat(moduleIDIC, "multi")

	return moduleIDIS
}

// bindParamIamManagerDescribeActions binds the parameter module_name
func (o *IamManagerDescribeActionsParams) bindParamModuleName(formats strfmt.Registry) []string {
	moduleNameIR := o.ModuleName

	var moduleNameIC []string
	for _, moduleNameIIR := range moduleNameIR { // explode []string

		moduleNameIIV := moduleNameIIR // string as string
		moduleNameIC = append(moduleNameIC, moduleNameIIV)
	}

	// items.CollectionFormat: "multi"
	moduleNameIS := swag.JoinByFormat(moduleNameIC, "multi")

	return moduleNameIS
}

// bindParamIamManagerDescribeActions binds the parameter role_id
func (o *IamManagerDescribeActionsParams) bindParamRoleID(formats strfmt.Registry) []string {
	roleIDIR := o.RoleID

	var roleIDIC []string
	for _, roleIDIIR := range roleIDIR { // explode []string

		roleIDIIV := roleIDIIR // string as string
		roleIDIC = append(roleIDIC, roleIDIIV)
	}

	// items.CollectionFormat: "multi"
	roleIDIS := swag.JoinByFormat(roleIDIC, "multi")

	return roleIDIS
}
