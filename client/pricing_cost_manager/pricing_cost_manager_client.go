// Code generated by go-swagger; DO NOT EDIT.

package pricing_cost_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pricing cost manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pricing cost manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PricingCostManagerCalculateComponentsPrice(params *PricingCostManagerCalculateComponentsPriceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingCostManagerCalculateComponentsPriceOK, error)

	PricingCostManagerCalculateComponentsPrice4CompsTransfer(params *PricingCostManagerCalculateComponentsPrice4CompsTransferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingCostManagerCalculateComponentsPrice4CompsTransferOK, error)

	PricingCostManagerCalculateProductPrice(params *PricingCostManagerCalculateProductPriceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingCostManagerCalculateProductPriceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PricingCostManagerCalculateComponentsPrice 计算一组计费项的价格s
*/
func (a *Client) PricingCostManagerCalculateComponentsPrice(params *PricingCostManagerCalculateComponentsPriceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingCostManagerCalculateComponentsPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingCostManagerCalculateComponentsPriceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingCostManager_CalculateComponentsPrice",
		Method:             "POST",
		PathPattern:        "/v1/components/cost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingCostManagerCalculateComponentsPriceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingCostManagerCalculateComponentsPriceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingCostManagerCalculateComponentsPriceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingCostManagerCalculateComponentsPrice4CompsTransfer 计算一组计费项转换计费模式后的价格s
*/
func (a *Client) PricingCostManagerCalculateComponentsPrice4CompsTransfer(params *PricingCostManagerCalculateComponentsPrice4CompsTransferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingCostManagerCalculateComponentsPrice4CompsTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingCostManagerCalculateComponentsPrice4CompsTransferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingCostManager_CalculateComponentsPrice4CompsTransfer",
		Method:             "POST",
		PathPattern:        "/v1/components/cost:transferbillingmode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingCostManagerCalculateComponentsPrice4CompsTransferReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingCostManagerCalculateComponentsPrice4CompsTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingCostManagerCalculateComponentsPrice4CompsTransferDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingCostManagerCalculateProductPrice ds e p r e c a t e d 1 外部接口 计算产品级别的价格 v1 cost1 1版本 用于对接系统 anybox计算价格
*/
func (a *Client) PricingCostManagerCalculateProductPrice(params *PricingCostManagerCalculateProductPriceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingCostManagerCalculateProductPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingCostManagerCalculateProductPriceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingCostManager_CalculateProductPrice",
		Method:             "POST",
		PathPattern:        "/v1/cost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingCostManagerCalculateProductPriceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingCostManagerCalculateProductPriceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingCostManagerCalculateProductPriceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
