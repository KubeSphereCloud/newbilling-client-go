// Code generated by go-swagger; DO NOT EDIT.

package pricing_cost_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/newbilling-client-go/models"
)

// PricingCostManagerCalculateProductPriceReader is a Reader for the PricingCostManagerCalculateProductPrice structure.
type PricingCostManagerCalculateProductPriceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PricingCostManagerCalculateProductPriceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPricingCostManagerCalculateProductPriceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPricingCostManagerCalculateProductPriceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPricingCostManagerCalculateProductPriceOK creates a PricingCostManagerCalculateProductPriceOK with default headers values
func NewPricingCostManagerCalculateProductPriceOK() *PricingCostManagerCalculateProductPriceOK {
	return &PricingCostManagerCalculateProductPriceOK{}
}

/*
PricingCostManagerCalculateProductPriceOK describes a response with status code 200, with default header values.

A successful response.
*/
type PricingCostManagerCalculateProductPriceOK struct {
	Payload *models.NewbillingCalculateProductPriceResponse
}

// IsSuccess returns true when this pricing cost manager calculate product price o k response has a 2xx status code
func (o *PricingCostManagerCalculateProductPriceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pricing cost manager calculate product price o k response has a 3xx status code
func (o *PricingCostManagerCalculateProductPriceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pricing cost manager calculate product price o k response has a 4xx status code
func (o *PricingCostManagerCalculateProductPriceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pricing cost manager calculate product price o k response has a 5xx status code
func (o *PricingCostManagerCalculateProductPriceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pricing cost manager calculate product price o k response a status code equal to that given
func (o *PricingCostManagerCalculateProductPriceOK) IsCode(code int) bool {
	return code == 200
}

func (o *PricingCostManagerCalculateProductPriceOK) Error() string {
	return fmt.Sprintf("[POST /v1/cost][%d] pricingCostManagerCalculateProductPriceOK  %+v", 200, o.Payload)
}

func (o *PricingCostManagerCalculateProductPriceOK) String() string {
	return fmt.Sprintf("[POST /v1/cost][%d] pricingCostManagerCalculateProductPriceOK  %+v", 200, o.Payload)
}

func (o *PricingCostManagerCalculateProductPriceOK) GetPayload() *models.NewbillingCalculateProductPriceResponse {
	return o.Payload
}

func (o *PricingCostManagerCalculateProductPriceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NewbillingCalculateProductPriceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPricingCostManagerCalculateProductPriceDefault creates a PricingCostManagerCalculateProductPriceDefault with default headers values
func NewPricingCostManagerCalculateProductPriceDefault(code int) *PricingCostManagerCalculateProductPriceDefault {
	return &PricingCostManagerCalculateProductPriceDefault{
		_statusCode: code,
	}
}

/*
PricingCostManagerCalculateProductPriceDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type PricingCostManagerCalculateProductPriceDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the pricing cost manager calculate product price default response
func (o *PricingCostManagerCalculateProductPriceDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this pricing cost manager calculate product price default response has a 2xx status code
func (o *PricingCostManagerCalculateProductPriceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this pricing cost manager calculate product price default response has a 3xx status code
func (o *PricingCostManagerCalculateProductPriceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this pricing cost manager calculate product price default response has a 4xx status code
func (o *PricingCostManagerCalculateProductPriceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this pricing cost manager calculate product price default response has a 5xx status code
func (o *PricingCostManagerCalculateProductPriceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this pricing cost manager calculate product price default response a status code equal to that given
func (o *PricingCostManagerCalculateProductPriceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PricingCostManagerCalculateProductPriceDefault) Error() string {
	return fmt.Sprintf("[POST /v1/cost][%d] PricingCostManager_CalculateProductPrice default  %+v", o._statusCode, o.Payload)
}

func (o *PricingCostManagerCalculateProductPriceDefault) String() string {
	return fmt.Sprintf("[POST /v1/cost][%d] PricingCostManager_CalculateProductPrice default  %+v", o._statusCode, o.Payload)
}

func (o *PricingCostManagerCalculateProductPriceDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *PricingCostManagerCalculateProductPriceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
