// Code generated by go-swagger; DO NOT EDIT.

package pricing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPricingManagerGetProductParams creates a new PricingManagerGetProductParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPricingManagerGetProductParams() *PricingManagerGetProductParams {
	return &PricingManagerGetProductParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPricingManagerGetProductParamsWithTimeout creates a new PricingManagerGetProductParams object
// with the ability to set a timeout on a request.
func NewPricingManagerGetProductParamsWithTimeout(timeout time.Duration) *PricingManagerGetProductParams {
	return &PricingManagerGetProductParams{
		timeout: timeout,
	}
}

// NewPricingManagerGetProductParamsWithContext creates a new PricingManagerGetProductParams object
// with the ability to set a context for a request.
func NewPricingManagerGetProductParamsWithContext(ctx context.Context) *PricingManagerGetProductParams {
	return &PricingManagerGetProductParams{
		Context: ctx,
	}
}

// NewPricingManagerGetProductParamsWithHTTPClient creates a new PricingManagerGetProductParams object
// with the ability to set a custom HTTPClient for a request.
func NewPricingManagerGetProductParamsWithHTTPClient(client *http.Client) *PricingManagerGetProductParams {
	return &PricingManagerGetProductParams{
		HTTPClient: client,
	}
}

/*
PricingManagerGetProductParams contains all the parameters to send to the API endpoint

	for the pricing manager get product operation.

	Typically these are written to a http.Request.
*/
type PricingManagerGetProductParams struct {

	/* AccessSysID.

	   接入系统ID, nb内部调用须传，走gateway的外部请求不需要传.
	*/
	AccessSysID *string

	/* ProdID.

	   兼容prod_id 和 prod_code
	*/
	ProdID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pricing manager get product params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingManagerGetProductParams) WithDefaults() *PricingManagerGetProductParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pricing manager get product params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingManagerGetProductParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pricing manager get product params
func (o *PricingManagerGetProductParams) WithTimeout(timeout time.Duration) *PricingManagerGetProductParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pricing manager get product params
func (o *PricingManagerGetProductParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pricing manager get product params
func (o *PricingManagerGetProductParams) WithContext(ctx context.Context) *PricingManagerGetProductParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pricing manager get product params
func (o *PricingManagerGetProductParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pricing manager get product params
func (o *PricingManagerGetProductParams) WithHTTPClient(client *http.Client) *PricingManagerGetProductParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pricing manager get product params
func (o *PricingManagerGetProductParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessSysID adds the accessSysID to the pricing manager get product params
func (o *PricingManagerGetProductParams) WithAccessSysID(accessSysID *string) *PricingManagerGetProductParams {
	o.SetAccessSysID(accessSysID)
	return o
}

// SetAccessSysID adds the accessSysId to the pricing manager get product params
func (o *PricingManagerGetProductParams) SetAccessSysID(accessSysID *string) {
	o.AccessSysID = accessSysID
}

// WithProdID adds the prodID to the pricing manager get product params
func (o *PricingManagerGetProductParams) WithProdID(prodID string) *PricingManagerGetProductParams {
	o.SetProdID(prodID)
	return o
}

// SetProdID adds the prodId to the pricing manager get product params
func (o *PricingManagerGetProductParams) SetProdID(prodID string) {
	o.ProdID = prodID
}

// WriteToRequest writes these params to a swagger request
func (o *PricingManagerGetProductParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessSysID != nil {

		// query param access_sys_id
		var qrAccessSysID string

		if o.AccessSysID != nil {
			qrAccessSysID = *o.AccessSysID
		}
		qAccessSysID := qrAccessSysID
		if qAccessSysID != "" {

			if err := r.SetQueryParam("access_sys_id", qAccessSysID); err != nil {
				return err
			}
		}
	}

	// path param prod_id
	if err := r.SetPathParam("prod_id", o.ProdID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
