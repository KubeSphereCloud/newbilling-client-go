// Code generated by go-swagger; DO NOT EDIT.

package pricing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPricingManagerDescribeFiltersParams creates a new PricingManagerDescribeFiltersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPricingManagerDescribeFiltersParams() *PricingManagerDescribeFiltersParams {
	return &PricingManagerDescribeFiltersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPricingManagerDescribeFiltersParamsWithTimeout creates a new PricingManagerDescribeFiltersParams object
// with the ability to set a timeout on a request.
func NewPricingManagerDescribeFiltersParamsWithTimeout(timeout time.Duration) *PricingManagerDescribeFiltersParams {
	return &PricingManagerDescribeFiltersParams{
		timeout: timeout,
	}
}

// NewPricingManagerDescribeFiltersParamsWithContext creates a new PricingManagerDescribeFiltersParams object
// with the ability to set a context for a request.
func NewPricingManagerDescribeFiltersParamsWithContext(ctx context.Context) *PricingManagerDescribeFiltersParams {
	return &PricingManagerDescribeFiltersParams{
		Context: ctx,
	}
}

// NewPricingManagerDescribeFiltersParamsWithHTTPClient creates a new PricingManagerDescribeFiltersParams object
// with the ability to set a custom HTTPClient for a request.
func NewPricingManagerDescribeFiltersParamsWithHTTPClient(client *http.Client) *PricingManagerDescribeFiltersParams {
	return &PricingManagerDescribeFiltersParams{
		HTTPClient: client,
	}
}

/*
PricingManagerDescribeFiltersParams contains all the parameters to send to the API endpoint

	for the pricing manager describe filters operation.

	Typically these are written to a http.Request.
*/
type PricingManagerDescribeFiltersParams struct {

	/* FilterCode.

	   条件编码列表.
	*/
	FilterCode []string

	/* FilterID.

	   条件ID列表.
	*/
	FilterID []string

	/* Limit.

	   数据库查询每页大小 - 默认 20, 最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Name.

	   条件名称列表.
	*/
	Name []string

	/* Offset.

	   数据库查询偏移位置 - 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* ProdID.

	   产品ID列表.
	*/
	ProdID []string

	/* Reverse.

	   是否倒序排序 - value = 0 sort ASC, value = 1 sort DESC.
	*/
	Reverse *bool

	/* SearchWord.

	   模糊查询关键字.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pricing manager describe filters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingManagerDescribeFiltersParams) WithDefaults() *PricingManagerDescribeFiltersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pricing manager describe filters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingManagerDescribeFiltersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithTimeout(timeout time.Duration) *PricingManagerDescribeFiltersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithContext(ctx context.Context) *PricingManagerDescribeFiltersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithHTTPClient(client *http.Client) *PricingManagerDescribeFiltersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterCode adds the filterCode to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithFilterCode(filterCode []string) *PricingManagerDescribeFiltersParams {
	o.SetFilterCode(filterCode)
	return o
}

// SetFilterCode adds the filterCode to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetFilterCode(filterCode []string) {
	o.FilterCode = filterCode
}

// WithFilterID adds the filterID to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithFilterID(filterID []string) *PricingManagerDescribeFiltersParams {
	o.SetFilterID(filterID)
	return o
}

// SetFilterID adds the filterId to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetFilterID(filterID []string) {
	o.FilterID = filterID
}

// WithLimit adds the limit to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithLimit(limit *string) *PricingManagerDescribeFiltersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithName adds the name to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithName(name []string) *PricingManagerDescribeFiltersParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetName(name []string) {
	o.Name = name
}

// WithOffset adds the offset to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithOffset(offset *string) *PricingManagerDescribeFiltersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithProdID adds the prodID to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithProdID(prodID []string) *PricingManagerDescribeFiltersParams {
	o.SetProdID(prodID)
	return o
}

// SetProdID adds the prodId to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetProdID(prodID []string) {
	o.ProdID = prodID
}

// WithReverse adds the reverse to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithReverse(reverse *bool) *PricingManagerDescribeFiltersParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithSearchWord(searchWord *string) *PricingManagerDescribeFiltersParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) WithSortKey(sortKey *string) *PricingManagerDescribeFiltersParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the pricing manager describe filters params
func (o *PricingManagerDescribeFiltersParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WriteToRequest writes these params to a swagger request
func (o *PricingManagerDescribeFiltersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterCode != nil {

		// binding items for filter_code
		joinedFilterCode := o.bindParamFilterCode(reg)

		// query array param filter_code
		if err := r.SetQueryParam("filter_code", joinedFilterCode...); err != nil {
			return err
		}
	}

	if o.FilterID != nil {

		// binding items for filter_id
		joinedFilterID := o.bindParamFilterID(reg)

		// query array param filter_id
		if err := r.SetQueryParam("filter_id", joinedFilterID...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// binding items for name
		joinedName := o.bindParamName(reg)

		// query array param name
		if err := r.SetQueryParam("name", joinedName...); err != nil {
			return err
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ProdID != nil {

		// binding items for prod_id
		joinedProdID := o.bindParamProdID(reg)

		// query array param prod_id
		if err := r.SetQueryParam("prod_id", joinedProdID...); err != nil {
			return err
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPricingManagerDescribeFilters binds the parameter filter_code
func (o *PricingManagerDescribeFiltersParams) bindParamFilterCode(formats strfmt.Registry) []string {
	filterCodeIR := o.FilterCode

	var filterCodeIC []string
	for _, filterCodeIIR := range filterCodeIR { // explode []string

		filterCodeIIV := filterCodeIIR // string as string
		filterCodeIC = append(filterCodeIC, filterCodeIIV)
	}

	// items.CollectionFormat: "multi"
	filterCodeIS := swag.JoinByFormat(filterCodeIC, "multi")

	return filterCodeIS
}

// bindParamPricingManagerDescribeFilters binds the parameter filter_id
func (o *PricingManagerDescribeFiltersParams) bindParamFilterID(formats strfmt.Registry) []string {
	filterIDIR := o.FilterID

	var filterIDIC []string
	for _, filterIDIIR := range filterIDIR { // explode []string

		filterIDIIV := filterIDIIR // string as string
		filterIDIC = append(filterIDIC, filterIDIIV)
	}

	// items.CollectionFormat: "multi"
	filterIDIS := swag.JoinByFormat(filterIDIC, "multi")

	return filterIDIS
}

// bindParamPricingManagerDescribeFilters binds the parameter name
func (o *PricingManagerDescribeFiltersParams) bindParamName(formats strfmt.Registry) []string {
	nameIR := o.Name

	var nameIC []string
	for _, nameIIR := range nameIR { // explode []string

		nameIIV := nameIIR // string as string
		nameIC = append(nameIC, nameIIV)
	}

	// items.CollectionFormat: "multi"
	nameIS := swag.JoinByFormat(nameIC, "multi")

	return nameIS
}

// bindParamPricingManagerDescribeFilters binds the parameter prod_id
func (o *PricingManagerDescribeFiltersParams) bindParamProdID(formats strfmt.Registry) []string {
	prodIDIR := o.ProdID

	var prodIDIC []string
	for _, prodIDIIR := range prodIDIR { // explode []string

		prodIDIIV := prodIDIIR // string as string
		prodIDIC = append(prodIDIC, prodIDIIV)
	}

	// items.CollectionFormat: "multi"
	prodIDIS := swag.JoinByFormat(prodIDIC, "multi")

	return prodIDIS
}
