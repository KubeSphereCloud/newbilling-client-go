// Code generated by go-swagger; DO NOT EDIT.

package pricing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPricingManagerDescribeProductsParams creates a new PricingManagerDescribeProductsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPricingManagerDescribeProductsParams() *PricingManagerDescribeProductsParams {
	return &PricingManagerDescribeProductsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPricingManagerDescribeProductsParamsWithTimeout creates a new PricingManagerDescribeProductsParams object
// with the ability to set a timeout on a request.
func NewPricingManagerDescribeProductsParamsWithTimeout(timeout time.Duration) *PricingManagerDescribeProductsParams {
	return &PricingManagerDescribeProductsParams{
		timeout: timeout,
	}
}

// NewPricingManagerDescribeProductsParamsWithContext creates a new PricingManagerDescribeProductsParams object
// with the ability to set a context for a request.
func NewPricingManagerDescribeProductsParamsWithContext(ctx context.Context) *PricingManagerDescribeProductsParams {
	return &PricingManagerDescribeProductsParams{
		Context: ctx,
	}
}

// NewPricingManagerDescribeProductsParamsWithHTTPClient creates a new PricingManagerDescribeProductsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPricingManagerDescribeProductsParamsWithHTTPClient(client *http.Client) *PricingManagerDescribeProductsParams {
	return &PricingManagerDescribeProductsParams{
		HTTPClient: client,
	}
}

/*
PricingManagerDescribeProductsParams contains all the parameters to send to the API endpoint

	for the pricing manager describe products operation.

	Typically these are written to a http.Request.
*/
type PricingManagerDescribeProductsParams struct {

	/* AccessSysID.

	   接入系统ID.
	*/
	AccessSysID []string

	/* CataID.

	   产品目录ID.
	*/
	CataID []string

	/* EffectiveTime.

	   生效时间 - format: 2019-12-18T14:16:20.027Z.

	   Format: date-time
	*/
	EffectiveTime *strfmt.DateTime

	/* ExpirationTime.

	   失效时间 - format: 2019-12-18T14:16:20.027Z.

	   Format: date-time
	*/
	ExpirationTime *strfmt.DateTime

	/* Limit.

	   数据库查询每页大小 - 默认 20, 最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Name.

	   产品名称.
	*/
	Name []string

	/* Offset.

	   数据库查询偏移位置 - 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* ProdCode.

	   产品编码.
	*/
	ProdCode []string

	/* ProdID.

	   产品ID.
	*/
	ProdID []string

	/* Reverse.

	   是否倒序排序 - value = 0 sort ASC, value = 1 sort DESC.
	*/
	Reverse *bool

	/* SearchWord.

	   模糊查询关键字.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pricing manager describe products params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingManagerDescribeProductsParams) WithDefaults() *PricingManagerDescribeProductsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pricing manager describe products params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingManagerDescribeProductsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithTimeout(timeout time.Duration) *PricingManagerDescribeProductsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithContext(ctx context.Context) *PricingManagerDescribeProductsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithHTTPClient(client *http.Client) *PricingManagerDescribeProductsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessSysID adds the accessSysID to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithAccessSysID(accessSysID []string) *PricingManagerDescribeProductsParams {
	o.SetAccessSysID(accessSysID)
	return o
}

// SetAccessSysID adds the accessSysId to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetAccessSysID(accessSysID []string) {
	o.AccessSysID = accessSysID
}

// WithCataID adds the cataID to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithCataID(cataID []string) *PricingManagerDescribeProductsParams {
	o.SetCataID(cataID)
	return o
}

// SetCataID adds the cataId to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetCataID(cataID []string) {
	o.CataID = cataID
}

// WithEffectiveTime adds the effectiveTime to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithEffectiveTime(effectiveTime *strfmt.DateTime) *PricingManagerDescribeProductsParams {
	o.SetEffectiveTime(effectiveTime)
	return o
}

// SetEffectiveTime adds the effectiveTime to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetEffectiveTime(effectiveTime *strfmt.DateTime) {
	o.EffectiveTime = effectiveTime
}

// WithExpirationTime adds the expirationTime to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithExpirationTime(expirationTime *strfmt.DateTime) *PricingManagerDescribeProductsParams {
	o.SetExpirationTime(expirationTime)
	return o
}

// SetExpirationTime adds the expirationTime to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetExpirationTime(expirationTime *strfmt.DateTime) {
	o.ExpirationTime = expirationTime
}

// WithLimit adds the limit to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithLimit(limit *string) *PricingManagerDescribeProductsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithName adds the name to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithName(name []string) *PricingManagerDescribeProductsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetName(name []string) {
	o.Name = name
}

// WithOffset adds the offset to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithOffset(offset *string) *PricingManagerDescribeProductsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithProdCode adds the prodCode to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithProdCode(prodCode []string) *PricingManagerDescribeProductsParams {
	o.SetProdCode(prodCode)
	return o
}

// SetProdCode adds the prodCode to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetProdCode(prodCode []string) {
	o.ProdCode = prodCode
}

// WithProdID adds the prodID to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithProdID(prodID []string) *PricingManagerDescribeProductsParams {
	o.SetProdID(prodID)
	return o
}

// SetProdID adds the prodId to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetProdID(prodID []string) {
	o.ProdID = prodID
}

// WithReverse adds the reverse to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithReverse(reverse *bool) *PricingManagerDescribeProductsParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithSearchWord(searchWord *string) *PricingManagerDescribeProductsParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) WithSortKey(sortKey *string) *PricingManagerDescribeProductsParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the pricing manager describe products params
func (o *PricingManagerDescribeProductsParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WriteToRequest writes these params to a swagger request
func (o *PricingManagerDescribeProductsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessSysID != nil {

		// binding items for access_sys_id
		joinedAccessSysID := o.bindParamAccessSysID(reg)

		// query array param access_sys_id
		if err := r.SetQueryParam("access_sys_id", joinedAccessSysID...); err != nil {
			return err
		}
	}

	if o.CataID != nil {

		// binding items for cata_id
		joinedCataID := o.bindParamCataID(reg)

		// query array param cata_id
		if err := r.SetQueryParam("cata_id", joinedCataID...); err != nil {
			return err
		}
	}

	if o.EffectiveTime != nil {

		// query param effective_time
		var qrEffectiveTime strfmt.DateTime

		if o.EffectiveTime != nil {
			qrEffectiveTime = *o.EffectiveTime
		}
		qEffectiveTime := qrEffectiveTime.String()
		if qEffectiveTime != "" {

			if err := r.SetQueryParam("effective_time", qEffectiveTime); err != nil {
				return err
			}
		}
	}

	if o.ExpirationTime != nil {

		// query param expiration_time
		var qrExpirationTime strfmt.DateTime

		if o.ExpirationTime != nil {
			qrExpirationTime = *o.ExpirationTime
		}
		qExpirationTime := qrExpirationTime.String()
		if qExpirationTime != "" {

			if err := r.SetQueryParam("expiration_time", qExpirationTime); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// binding items for name
		joinedName := o.bindParamName(reg)

		// query array param name
		if err := r.SetQueryParam("name", joinedName...); err != nil {
			return err
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ProdCode != nil {

		// binding items for prod_code
		joinedProdCode := o.bindParamProdCode(reg)

		// query array param prod_code
		if err := r.SetQueryParam("prod_code", joinedProdCode...); err != nil {
			return err
		}
	}

	if o.ProdID != nil {

		// binding items for prod_id
		joinedProdID := o.bindParamProdID(reg)

		// query array param prod_id
		if err := r.SetQueryParam("prod_id", joinedProdID...); err != nil {
			return err
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPricingManagerDescribeProducts binds the parameter access_sys_id
func (o *PricingManagerDescribeProductsParams) bindParamAccessSysID(formats strfmt.Registry) []string {
	accessSysIDIR := o.AccessSysID

	var accessSysIDIC []string
	for _, accessSysIDIIR := range accessSysIDIR { // explode []string

		accessSysIDIIV := accessSysIDIIR // string as string
		accessSysIDIC = append(accessSysIDIC, accessSysIDIIV)
	}

	// items.CollectionFormat: "multi"
	accessSysIDIS := swag.JoinByFormat(accessSysIDIC, "multi")

	return accessSysIDIS
}

// bindParamPricingManagerDescribeProducts binds the parameter cata_id
func (o *PricingManagerDescribeProductsParams) bindParamCataID(formats strfmt.Registry) []string {
	cataIDIR := o.CataID

	var cataIDIC []string
	for _, cataIDIIR := range cataIDIR { // explode []string

		cataIDIIV := cataIDIIR // string as string
		cataIDIC = append(cataIDIC, cataIDIIV)
	}

	// items.CollectionFormat: "multi"
	cataIDIS := swag.JoinByFormat(cataIDIC, "multi")

	return cataIDIS
}

// bindParamPricingManagerDescribeProducts binds the parameter name
func (o *PricingManagerDescribeProductsParams) bindParamName(formats strfmt.Registry) []string {
	nameIR := o.Name

	var nameIC []string
	for _, nameIIR := range nameIR { // explode []string

		nameIIV := nameIIR // string as string
		nameIC = append(nameIC, nameIIV)
	}

	// items.CollectionFormat: "multi"
	nameIS := swag.JoinByFormat(nameIC, "multi")

	return nameIS
}

// bindParamPricingManagerDescribeProducts binds the parameter prod_code
func (o *PricingManagerDescribeProductsParams) bindParamProdCode(formats strfmt.Registry) []string {
	prodCodeIR := o.ProdCode

	var prodCodeIC []string
	for _, prodCodeIIR := range prodCodeIR { // explode []string

		prodCodeIIV := prodCodeIIR // string as string
		prodCodeIC = append(prodCodeIC, prodCodeIIV)
	}

	// items.CollectionFormat: "multi"
	prodCodeIS := swag.JoinByFormat(prodCodeIC, "multi")

	return prodCodeIS
}

// bindParamPricingManagerDescribeProducts binds the parameter prod_id
func (o *PricingManagerDescribeProductsParams) bindParamProdID(formats strfmt.Registry) []string {
	prodIDIR := o.ProdID

	var prodIDIC []string
	for _, prodIDIIR := range prodIDIR { // explode []string

		prodIDIIV := prodIDIIR // string as string
		prodIDIC = append(prodIDIC, prodIDIIV)
	}

	// items.CollectionFormat: "multi"
	prodIDIS := swag.JoinByFormat(prodIDIC, "multi")

	return prodIDIS
}
