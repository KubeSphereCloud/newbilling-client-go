// Code generated by go-swagger; DO NOT EDIT.

package pricing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pricing manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pricing manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PricingManagerCreateAttribute(params *PricingManagerCreateAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateAttributeOK, error)

	PricingManagerCreateCatalog(params *PricingManagerCreateCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateCatalogOK, error)

	PricingManagerCreateComponent(params *PricingManagerCreateComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateComponentOK, error)

	PricingManagerCreateComponentOfPricingSimple(params *PricingManagerCreateComponentOfPricingSimpleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateComponentOfPricingSimpleOK, error)

	PricingManagerCreateComponentOfResPkg(params *PricingManagerCreateComponentOfResPkgParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateComponentOfResPkgOK, error)

	PricingManagerCreateFilter(params *PricingManagerCreateFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateFilterOK, error)

	PricingManagerCreatePlan(params *PricingManagerCreatePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreatePlanOK, error)

	PricingManagerCreatePricing(params *PricingManagerCreatePricingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreatePricingOK, error)

	PricingManagerCreateProduct(params *PricingManagerCreateProductParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateProductOK, error)

	PricingManagerCreateStrategy(params *PricingManagerCreateStrategyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateStrategyOK, error)

	PricingManagerDeleteAttributes(params *PricingManagerDeleteAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteAttributesOK, error)

	PricingManagerDeleteCatalogs(params *PricingManagerDeleteCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteCatalogsOK, error)

	PricingManagerDeleteComponents(params *PricingManagerDeleteComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteComponentsOK, error)

	PricingManagerDeleteFilters(params *PricingManagerDeleteFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteFiltersOK, error)

	PricingManagerDeletePlans(params *PricingManagerDeletePlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeletePlansOK, error)

	PricingManagerDeletePricing(params *PricingManagerDeletePricingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeletePricingOK, error)

	PricingManagerDeleteProducts(params *PricingManagerDeleteProductsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteProductsOK, error)

	PricingManagerDeleteStrategies(params *PricingManagerDeleteStrategiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteStrategiesOK, error)

	PricingManagerDescribeAttributes(params *PricingManagerDescribeAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeAttributesOK, error)

	PricingManagerDescribeCatalogs(params *PricingManagerDescribeCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeCatalogsOK, error)

	PricingManagerDescribeComponents(params *PricingManagerDescribeComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeComponentsOK, error)

	PricingManagerDescribeComponentsOfPricingSimple(params *PricingManagerDescribeComponentsOfPricingSimpleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeComponentsOfPricingSimpleOK, error)

	PricingManagerDescribeFilters(params *PricingManagerDescribeFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeFiltersOK, error)

	PricingManagerDescribePlans(params *PricingManagerDescribePlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribePlansOK, error)

	PricingManagerDescribeProducts(params *PricingManagerDescribeProductsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeProductsOK, error)

	PricingManagerDescribePublicAttributes(params *PricingManagerDescribePublicAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribePublicAttributesOK, error)

	PricingManagerDescribeStrategies(params *PricingManagerDescribeStrategiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeStrategiesOK, error)

	PricingManagerGetPricing(params *PricingManagerGetPricingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerGetPricingOK, error)

	PricingManagerGetProduct(params *PricingManagerGetProductParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerGetProductOK, error)

	PricingManagerMappingComponent(params *PricingManagerMappingComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerMappingComponentOK, error)

	PricingManagerModifyAttribute(params *PricingManagerModifyAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyAttributeOK, error)

	PricingManagerModifyCatalog(params *PricingManagerModifyCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyCatalogOK, error)

	PricingManagerModifyComponent(params *PricingManagerModifyComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyComponentOK, error)

	PricingManagerModifyComponentOfPricingSimple(params *PricingManagerModifyComponentOfPricingSimpleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyComponentOfPricingSimpleOK, error)

	PricingManagerModifyComponentOfResPkg(params *PricingManagerModifyComponentOfResPkgParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyComponentOfResPkgOK, error)

	PricingManagerModifyFilter(params *PricingManagerModifyFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyFilterOK, error)

	PricingManagerModifyFilterName(params *PricingManagerModifyFilterNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyFilterNameOK, error)

	PricingManagerModifyPlan(params *PricingManagerModifyPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyPlanOK, error)

	PricingManagerModifyProduct(params *PricingManagerModifyProductParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyProductOK, error)

	PricingManagerModifyStrategy(params *PricingManagerModifyStrategyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyStrategyOK, error)

	PricingManagerPricingExport(params *PricingManagerPricingExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerPricingExportOK, error)

	PricingManagerPricingImport(params *PricingManagerPricingImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerPricingImportOK, error)

	PricingManagerUnMappingComponent(params *PricingManagerUnMappingComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerUnMappingComponentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PricingManagerCreateAttribute 属性s 创建
*/
func (a *Client) PricingManagerCreateAttribute(params *PricingManagerCreateAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreateAttributeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreateAttribute",
		Method:             "POST",
		PathPattern:        "/v1/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreateAttributeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreateAttributeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreateAttributeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerCreateCatalog 产品目录s 创建
*/
func (a *Client) PricingManagerCreateCatalog(params *PricingManagerCreateCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreateCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreateCatalog",
		Method:             "POST",
		PathPattern:        "/v1/catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreateCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreateCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreateCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerCreateComponent 计费项s 创建
*/
func (a *Client) PricingManagerCreateComponent(params *PricingManagerCreateComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreateComponentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreateComponent",
		Method:             "POST",
		PathPattern:        "/v1/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreateComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreateComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreateComponentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerCreateComponentOfPricingSimple 简单定价s 计费项 创建
*/
func (a *Client) PricingManagerCreateComponentOfPricingSimple(params *PricingManagerCreateComponentOfPricingSimpleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateComponentOfPricingSimpleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreateComponentOfPricingSimpleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreateComponentOfPricingSimple",
		Method:             "POST",
		PathPattern:        "/v1/components:pricing_simple",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreateComponentOfPricingSimpleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreateComponentOfPricingSimpleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreateComponentOfPricingSimpleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerCreateComponentOfResPkg 计费项s 资源包 创建
*/
func (a *Client) PricingManagerCreateComponentOfResPkg(params *PricingManagerCreateComponentOfResPkgParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateComponentOfResPkgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreateComponentOfResPkgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreateComponentOfResPkg",
		Method:             "POST",
		PathPattern:        "/v1/componentsofrespkg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreateComponentOfResPkgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreateComponentOfResPkgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreateComponentOfResPkgDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerCreateFilter 条件s 创建
*/
func (a *Client) PricingManagerCreateFilter(params *PricingManagerCreateFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreateFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreateFilter",
		Method:             "POST",
		PathPattern:        "/v1/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreateFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreateFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreateFilterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerCreatePlan 方案s 创建
*/
func (a *Client) PricingManagerCreatePlan(params *PricingManagerCreatePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreatePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreatePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreatePlan",
		Method:             "POST",
		PathPattern:        "/v1/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreatePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreatePlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreatePlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerCreatePricing 批量创建订价s
*/
func (a *Client) PricingManagerCreatePricing(params *PricingManagerCreatePricingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreatePricingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreatePricingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreatePricing",
		Method:             "POST",
		PathPattern:        "/v1/pricing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreatePricingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreatePricingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreatePricingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerCreateProduct 产品s 创建
*/
func (a *Client) PricingManagerCreateProduct(params *PricingManagerCreateProductParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreateProductParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreateProduct",
		Method:             "POST",
		PathPattern:        "/v1/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreateProductReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreateProductOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreateProductDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerCreateStrategy 策略s 创建
*/
func (a *Client) PricingManagerCreateStrategy(params *PricingManagerCreateStrategyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerCreateStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerCreateStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_CreateStrategy",
		Method:             "POST",
		PathPattern:        "/v1/strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerCreateStrategyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerCreateStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerCreateStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDeleteAttributes 属性s 删除
*/
func (a *Client) PricingManagerDeleteAttributes(params *PricingManagerDeleteAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDeleteAttributesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DeleteAttributes",
		Method:             "DELETE",
		PathPattern:        "/v1/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDeleteAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDeleteAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDeleteAttributesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDeleteCatalogs 产品目录s 删除
*/
func (a *Client) PricingManagerDeleteCatalogs(params *PricingManagerDeleteCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteCatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDeleteCatalogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DeleteCatalogs",
		Method:             "DELETE",
		PathPattern:        "/v1/catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDeleteCatalogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDeleteCatalogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDeleteCatalogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDeleteComponents 计费项s 删除
*/
func (a *Client) PricingManagerDeleteComponents(params *PricingManagerDeleteComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDeleteComponentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DeleteComponents",
		Method:             "DELETE",
		PathPattern:        "/v1/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDeleteComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDeleteComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDeleteComponentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDeleteFilters 条件s 删除
*/
func (a *Client) PricingManagerDeleteFilters(params *PricingManagerDeleteFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDeleteFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DeleteFilters",
		Method:             "DELETE",
		PathPattern:        "/v1/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDeleteFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDeleteFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDeleteFiltersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDeletePlans 方案s 删除
*/
func (a *Client) PricingManagerDeletePlans(params *PricingManagerDeletePlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeletePlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDeletePlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DeletePlans",
		Method:             "DELETE",
		PathPattern:        "/v1/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDeletePlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDeletePlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDeletePlansDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDeletePricing 批量删除订价s
*/
func (a *Client) PricingManagerDeletePricing(params *PricingManagerDeletePricingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeletePricingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDeletePricingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DeletePricing",
		Method:             "DELETE",
		PathPattern:        "/v1/pricing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDeletePricingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDeletePricingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDeletePricingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDeleteProducts 产品s 删除
*/
func (a *Client) PricingManagerDeleteProducts(params *PricingManagerDeleteProductsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteProductsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDeleteProductsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DeleteProducts",
		Method:             "DELETE",
		PathPattern:        "/v1/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDeleteProductsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDeleteProductsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDeleteProductsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDeleteStrategies 策略s 删除
*/
func (a *Client) PricingManagerDeleteStrategies(params *PricingManagerDeleteStrategiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDeleteStrategiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDeleteStrategiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DeleteStrategies",
		Method:             "DELETE",
		PathPattern:        "/v1/strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDeleteStrategiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDeleteStrategiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDeleteStrategiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDescribeAttributes 属性s 查询
*/
func (a *Client) PricingManagerDescribeAttributes(params *PricingManagerDescribeAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDescribeAttributesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DescribeAttributes",
		Method:             "GET",
		PathPattern:        "/v1/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDescribeAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDescribeAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDescribeAttributesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDescribeCatalogs 产品目录s 查询
*/
func (a *Client) PricingManagerDescribeCatalogs(params *PricingManagerDescribeCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeCatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDescribeCatalogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DescribeCatalogs",
		Method:             "GET",
		PathPattern:        "/v1/catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDescribeCatalogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDescribeCatalogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDescribeCatalogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDescribeComponents 计费项s 查询
*/
func (a *Client) PricingManagerDescribeComponents(params *PricingManagerDescribeComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDescribeComponentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DescribeComponents",
		Method:             "GET",
		PathPattern:        "/v1/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDescribeComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDescribeComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDescribeComponentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDescribeComponentsOfPricingSimple 简单定价s 计费项 查询
*/
func (a *Client) PricingManagerDescribeComponentsOfPricingSimple(params *PricingManagerDescribeComponentsOfPricingSimpleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeComponentsOfPricingSimpleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDescribeComponentsOfPricingSimpleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DescribeComponentsOfPricingSimple",
		Method:             "GET",
		PathPattern:        "/v1/components:pricing_simple",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDescribeComponentsOfPricingSimpleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDescribeComponentsOfPricingSimpleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDescribeComponentsOfPricingSimpleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDescribeFilters 条件s 查询
*/
func (a *Client) PricingManagerDescribeFilters(params *PricingManagerDescribeFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDescribeFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DescribeFilters",
		Method:             "GET",
		PathPattern:        "/v1/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDescribeFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDescribeFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDescribeFiltersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDescribePlans 方案s 查询
*/
func (a *Client) PricingManagerDescribePlans(params *PricingManagerDescribePlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribePlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDescribePlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DescribePlans",
		Method:             "GET",
		PathPattern:        "/v1/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDescribePlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDescribePlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDescribePlansDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDescribeProducts 产品s 查询
*/
func (a *Client) PricingManagerDescribeProducts(params *PricingManagerDescribeProductsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeProductsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDescribeProductsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DescribeProducts",
		Method:             "GET",
		PathPattern:        "/v1/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDescribeProductsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDescribeProductsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDescribeProductsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDescribePublicAttributes 公共属性s 查询
*/
func (a *Client) PricingManagerDescribePublicAttributes(params *PricingManagerDescribePublicAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribePublicAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDescribePublicAttributesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DescribePublicAttributes",
		Method:             "GET",
		PathPattern:        "/v1/publicattrs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDescribePublicAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDescribePublicAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDescribePublicAttributesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerDescribeStrategies 策略s 查询
*/
func (a *Client) PricingManagerDescribeStrategies(params *PricingManagerDescribeStrategiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerDescribeStrategiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerDescribeStrategiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_DescribeStrategies",
		Method:             "GET",
		PathPattern:        "/v1/strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerDescribeStrategiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerDescribeStrategiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerDescribeStrategiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerGetPricing 获取批量订价s
*/
func (a *Client) PricingManagerGetPricing(params *PricingManagerGetPricingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerGetPricingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerGetPricingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_GetPricing",
		Method:             "GET",
		PathPattern:        "/v1/pricing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerGetPricingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerGetPricingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerGetPricingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerGetProduct 产品s 查询单个产品定价详细配置信息 定价信息树
*/
func (a *Client) PricingManagerGetProduct(params *PricingManagerGetProductParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerGetProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerGetProductParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_GetProduct",
		Method:             "GET",
		PathPattern:        "/v1/products/{prod_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerGetProductReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerGetProductOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerGetProductDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerMappingComponent 计费项s 设置计费项转换关系
*/
func (a *Client) PricingManagerMappingComponent(params *PricingManagerMappingComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerMappingComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerMappingComponentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_MappingComponent",
		Method:             "POST",
		PathPattern:        "/v1/components:transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerMappingComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerMappingComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerMappingComponentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyAttribute 属性s 修改
*/
func (a *Client) PricingManagerModifyAttribute(params *PricingManagerModifyAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyAttributeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyAttribute",
		Method:             "PATCH",
		PathPattern:        "/v1/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyAttributeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyAttributeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyAttributeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyCatalog 产品目录s 修改
*/
func (a *Client) PricingManagerModifyCatalog(params *PricingManagerModifyCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyCatalog",
		Method:             "PATCH",
		PathPattern:        "/v1/catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyComponent 计费项s 修改
*/
func (a *Client) PricingManagerModifyComponent(params *PricingManagerModifyComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyComponentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyComponent",
		Method:             "PATCH",
		PathPattern:        "/v1/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyComponentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyComponentOfPricingSimple 简单定价s 计费项 修改
*/
func (a *Client) PricingManagerModifyComponentOfPricingSimple(params *PricingManagerModifyComponentOfPricingSimpleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyComponentOfPricingSimpleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyComponentOfPricingSimpleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyComponentOfPricingSimple",
		Method:             "PATCH",
		PathPattern:        "/v1/components:pricing_simple",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyComponentOfPricingSimpleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyComponentOfPricingSimpleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyComponentOfPricingSimpleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyComponentOfResPkg 计费项s 资源包 修改
*/
func (a *Client) PricingManagerModifyComponentOfResPkg(params *PricingManagerModifyComponentOfResPkgParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyComponentOfResPkgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyComponentOfResPkgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyComponentOfResPkg",
		Method:             "PATCH",
		PathPattern:        "/v1/componentsofrespkg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyComponentOfResPkgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyComponentOfResPkgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyComponentOfResPkgDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyFilter 条件s 修改
*/
func (a *Client) PricingManagerModifyFilter(params *PricingManagerModifyFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyFilter",
		Method:             "PATCH",
		PathPattern:        "/v1/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyFilterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyFilterName 条件s 修改名称
*/
func (a *Client) PricingManagerModifyFilterName(params *PricingManagerModifyFilterNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyFilterNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyFilterNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyFilterName",
		Method:             "PATCH",
		PathPattern:        "/v1/filters/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyFilterNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyFilterNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyFilterNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyPlan 方案s 修改
*/
func (a *Client) PricingManagerModifyPlan(params *PricingManagerModifyPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyPlan",
		Method:             "PATCH",
		PathPattern:        "/v1/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyProduct 产品s 修改
*/
func (a *Client) PricingManagerModifyProduct(params *PricingManagerModifyProductParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyProductParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyProduct",
		Method:             "PATCH",
		PathPattern:        "/v1/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyProductReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyProductOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyProductDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerModifyStrategy 策略s 修改
*/
func (a *Client) PricingManagerModifyStrategy(params *PricingManagerModifyStrategyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerModifyStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerModifyStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_ModifyStrategy",
		Method:             "PATCH",
		PathPattern:        "/v1/strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerModifyStrategyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerModifyStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerModifyStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerPricingExport 定价数据导出s
*/
func (a *Client) PricingManagerPricingExport(params *PricingManagerPricingExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerPricingExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerPricingExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_PricingExport",
		Method:             "GET",
		PathPattern:        "/v1/pricing/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerPricingExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerPricingExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerPricingExportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerPricingImport 定价数据导入s
*/
func (a *Client) PricingManagerPricingImport(params *PricingManagerPricingImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerPricingImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerPricingImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_PricingImport",
		Method:             "POST",
		PathPattern:        "/v1/pricing/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerPricingImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerPricingImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerPricingImportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PricingManagerUnMappingComponent 计费项s 取消计费项转换关系
*/
func (a *Client) PricingManagerUnMappingComponent(params *PricingManagerUnMappingComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PricingManagerUnMappingComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPricingManagerUnMappingComponentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PricingManager_UnMappingComponent",
		Method:             "POST",
		PathPattern:        "/v1/components:canceltransfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PricingManagerUnMappingComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PricingManagerUnMappingComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PricingManagerUnMappingComponentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
