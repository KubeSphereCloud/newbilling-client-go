// Code generated by go-swagger; DO NOT EDIT.

package pricing_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPricingManagerDescribeStrategiesParams creates a new PricingManagerDescribeStrategiesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPricingManagerDescribeStrategiesParams() *PricingManagerDescribeStrategiesParams {
	return &PricingManagerDescribeStrategiesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPricingManagerDescribeStrategiesParamsWithTimeout creates a new PricingManagerDescribeStrategiesParams object
// with the ability to set a timeout on a request.
func NewPricingManagerDescribeStrategiesParamsWithTimeout(timeout time.Duration) *PricingManagerDescribeStrategiesParams {
	return &PricingManagerDescribeStrategiesParams{
		timeout: timeout,
	}
}

// NewPricingManagerDescribeStrategiesParamsWithContext creates a new PricingManagerDescribeStrategiesParams object
// with the ability to set a context for a request.
func NewPricingManagerDescribeStrategiesParamsWithContext(ctx context.Context) *PricingManagerDescribeStrategiesParams {
	return &PricingManagerDescribeStrategiesParams{
		Context: ctx,
	}
}

// NewPricingManagerDescribeStrategiesParamsWithHTTPClient creates a new PricingManagerDescribeStrategiesParams object
// with the ability to set a custom HTTPClient for a request.
func NewPricingManagerDescribeStrategiesParamsWithHTTPClient(client *http.Client) *PricingManagerDescribeStrategiesParams {
	return &PricingManagerDescribeStrategiesParams{
		HTTPClient: client,
	}
}

/*
PricingManagerDescribeStrategiesParams contains all the parameters to send to the API endpoint

	for the pricing manager describe strategies operation.

	Typically these are written to a http.Request.
*/
type PricingManagerDescribeStrategiesParams struct {

	/* BasicDiscount.

	   基础折扣列表.
	*/
	BasicDiscount []string

	/* CompID.

	   计费项ID列表.
	*/
	CompID []string

	/* Limit.

	   数据库查询每页大小 - 默认 20, 最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Name.

	   策略名称列表.
	*/
	Name []string

	/* Offset.

	   数据库查询偏移位置 - 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* Priority.

	   策略优先级列表.
	*/
	Priority []int64

	/* ProdID.

	   产品ID列表,支持兼容code.
	*/
	ProdID []string

	/* Reverse.

	   是否倒序排序 - value = 0 sort ASC, value = 1 sort DESC.
	*/
	Reverse *bool

	/* SearchWord.

	   模糊查询关键字.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	/* StrategyCode.

	   策略编码列表.
	*/
	StrategyCode []string

	/* StrategyID.

	   策略ID列表.
	*/
	StrategyID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pricing manager describe strategies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingManagerDescribeStrategiesParams) WithDefaults() *PricingManagerDescribeStrategiesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pricing manager describe strategies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PricingManagerDescribeStrategiesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithTimeout(timeout time.Duration) *PricingManagerDescribeStrategiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithContext(ctx context.Context) *PricingManagerDescribeStrategiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithHTTPClient(client *http.Client) *PricingManagerDescribeStrategiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBasicDiscount adds the basicDiscount to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithBasicDiscount(basicDiscount []string) *PricingManagerDescribeStrategiesParams {
	o.SetBasicDiscount(basicDiscount)
	return o
}

// SetBasicDiscount adds the basicDiscount to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetBasicDiscount(basicDiscount []string) {
	o.BasicDiscount = basicDiscount
}

// WithCompID adds the compID to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithCompID(compID []string) *PricingManagerDescribeStrategiesParams {
	o.SetCompID(compID)
	return o
}

// SetCompID adds the compId to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetCompID(compID []string) {
	o.CompID = compID
}

// WithLimit adds the limit to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithLimit(limit *string) *PricingManagerDescribeStrategiesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithName adds the name to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithName(name []string) *PricingManagerDescribeStrategiesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetName(name []string) {
	o.Name = name
}

// WithOffset adds the offset to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithOffset(offset *string) *PricingManagerDescribeStrategiesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithPriority adds the priority to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithPriority(priority []int64) *PricingManagerDescribeStrategiesParams {
	o.SetPriority(priority)
	return o
}

// SetPriority adds the priority to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetPriority(priority []int64) {
	o.Priority = priority
}

// WithProdID adds the prodID to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithProdID(prodID []string) *PricingManagerDescribeStrategiesParams {
	o.SetProdID(prodID)
	return o
}

// SetProdID adds the prodId to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetProdID(prodID []string) {
	o.ProdID = prodID
}

// WithReverse adds the reverse to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithReverse(reverse *bool) *PricingManagerDescribeStrategiesParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithSearchWord(searchWord *string) *PricingManagerDescribeStrategiesParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithSortKey(sortKey *string) *PricingManagerDescribeStrategiesParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStrategyCode adds the strategyCode to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithStrategyCode(strategyCode []string) *PricingManagerDescribeStrategiesParams {
	o.SetStrategyCode(strategyCode)
	return o
}

// SetStrategyCode adds the strategyCode to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetStrategyCode(strategyCode []string) {
	o.StrategyCode = strategyCode
}

// WithStrategyID adds the strategyID to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) WithStrategyID(strategyID []string) *PricingManagerDescribeStrategiesParams {
	o.SetStrategyID(strategyID)
	return o
}

// SetStrategyID adds the strategyId to the pricing manager describe strategies params
func (o *PricingManagerDescribeStrategiesParams) SetStrategyID(strategyID []string) {
	o.StrategyID = strategyID
}

// WriteToRequest writes these params to a swagger request
func (o *PricingManagerDescribeStrategiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BasicDiscount != nil {

		// binding items for basic_discount
		joinedBasicDiscount := o.bindParamBasicDiscount(reg)

		// query array param basic_discount
		if err := r.SetQueryParam("basic_discount", joinedBasicDiscount...); err != nil {
			return err
		}
	}

	if o.CompID != nil {

		// binding items for comp_id
		joinedCompID := o.bindParamCompID(reg)

		// query array param comp_id
		if err := r.SetQueryParam("comp_id", joinedCompID...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// binding items for name
		joinedName := o.bindParamName(reg)

		// query array param name
		if err := r.SetQueryParam("name", joinedName...); err != nil {
			return err
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Priority != nil {

		// binding items for priority
		joinedPriority := o.bindParamPriority(reg)

		// query array param priority
		if err := r.SetQueryParam("priority", joinedPriority...); err != nil {
			return err
		}
	}

	if o.ProdID != nil {

		// binding items for prod_id
		joinedProdID := o.bindParamProdID(reg)

		// query array param prod_id
		if err := r.SetQueryParam("prod_id", joinedProdID...); err != nil {
			return err
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if o.StrategyCode != nil {

		// binding items for strategy_code
		joinedStrategyCode := o.bindParamStrategyCode(reg)

		// query array param strategy_code
		if err := r.SetQueryParam("strategy_code", joinedStrategyCode...); err != nil {
			return err
		}
	}

	if o.StrategyID != nil {

		// binding items for strategy_id
		joinedStrategyID := o.bindParamStrategyID(reg)

		// query array param strategy_id
		if err := r.SetQueryParam("strategy_id", joinedStrategyID...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPricingManagerDescribeStrategies binds the parameter basic_discount
func (o *PricingManagerDescribeStrategiesParams) bindParamBasicDiscount(formats strfmt.Registry) []string {
	basicDiscountIR := o.BasicDiscount

	var basicDiscountIC []string
	for _, basicDiscountIIR := range basicDiscountIR { // explode []string

		basicDiscountIIV := basicDiscountIIR // string as string
		basicDiscountIC = append(basicDiscountIC, basicDiscountIIV)
	}

	// items.CollectionFormat: "multi"
	basicDiscountIS := swag.JoinByFormat(basicDiscountIC, "multi")

	return basicDiscountIS
}

// bindParamPricingManagerDescribeStrategies binds the parameter comp_id
func (o *PricingManagerDescribeStrategiesParams) bindParamCompID(formats strfmt.Registry) []string {
	compIDIR := o.CompID

	var compIDIC []string
	for _, compIDIIR := range compIDIR { // explode []string

		compIDIIV := compIDIIR // string as string
		compIDIC = append(compIDIC, compIDIIV)
	}

	// items.CollectionFormat: "multi"
	compIDIS := swag.JoinByFormat(compIDIC, "multi")

	return compIDIS
}

// bindParamPricingManagerDescribeStrategies binds the parameter name
func (o *PricingManagerDescribeStrategiesParams) bindParamName(formats strfmt.Registry) []string {
	nameIR := o.Name

	var nameIC []string
	for _, nameIIR := range nameIR { // explode []string

		nameIIV := nameIIR // string as string
		nameIC = append(nameIC, nameIIV)
	}

	// items.CollectionFormat: "multi"
	nameIS := swag.JoinByFormat(nameIC, "multi")

	return nameIS
}

// bindParamPricingManagerDescribeStrategies binds the parameter priority
func (o *PricingManagerDescribeStrategiesParams) bindParamPriority(formats strfmt.Registry) []string {
	priorityIR := o.Priority

	var priorityIC []string
	for _, priorityIIR := range priorityIR { // explode []int64

		priorityIIV := swag.FormatInt64(priorityIIR) // int64 as string
		priorityIC = append(priorityIC, priorityIIV)
	}

	// items.CollectionFormat: "multi"
	priorityIS := swag.JoinByFormat(priorityIC, "multi")

	return priorityIS
}

// bindParamPricingManagerDescribeStrategies binds the parameter prod_id
func (o *PricingManagerDescribeStrategiesParams) bindParamProdID(formats strfmt.Registry) []string {
	prodIDIR := o.ProdID

	var prodIDIC []string
	for _, prodIDIIR := range prodIDIR { // explode []string

		prodIDIIV := prodIDIIR // string as string
		prodIDIC = append(prodIDIC, prodIDIIV)
	}

	// items.CollectionFormat: "multi"
	prodIDIS := swag.JoinByFormat(prodIDIC, "multi")

	return prodIDIS
}

// bindParamPricingManagerDescribeStrategies binds the parameter strategy_code
func (o *PricingManagerDescribeStrategiesParams) bindParamStrategyCode(formats strfmt.Registry) []string {
	strategyCodeIR := o.StrategyCode

	var strategyCodeIC []string
	for _, strategyCodeIIR := range strategyCodeIR { // explode []string

		strategyCodeIIV := strategyCodeIIR // string as string
		strategyCodeIC = append(strategyCodeIC, strategyCodeIIV)
	}

	// items.CollectionFormat: "multi"
	strategyCodeIS := swag.JoinByFormat(strategyCodeIC, "multi")

	return strategyCodeIS
}

// bindParamPricingManagerDescribeStrategies binds the parameter strategy_id
func (o *PricingManagerDescribeStrategiesParams) bindParamStrategyID(formats strfmt.Registry) []string {
	strategyIDIR := o.StrategyID

	var strategyIDIC []string
	for _, strategyIDIIR := range strategyIDIR { // explode []string

		strategyIDIIV := strategyIDIIR // string as string
		strategyIDIC = append(strategyIDIC, strategyIDIIV)
	}

	// items.CollectionFormat: "multi"
	strategyIDIS := swag.JoinByFormat(strategyIDIC, "multi")

	return strategyIDIS
}
