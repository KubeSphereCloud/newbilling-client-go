// Code generated by go-swagger; DO NOT EDIT.

package notifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notifier API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notifier API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NotifierCreateEvent(params *NotifierCreateEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierCreateEventOK, error)

	NotifierDescribeEvents(params *NotifierDescribeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierDescribeEventsOK, error)

	NotifierGetEmailServiceConfig(params *NotifierGetEmailServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierGetEmailServiceConfigOK, error)

	NotifierSendMails(params *NotifierSendMailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierSendMailsOK, error)

	NotifierSetEmailServiceConfig(params *NotifierSetEmailServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierSetEmailServiceConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
NotifierCreateEvent 计费事件s 创建
*/
func (a *Client) NotifierCreateEvent(params *NotifierCreateEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierCreateEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifierCreateEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifier_CreateEvent",
		Method:             "POST",
		PathPattern:        "/v1/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NotifierCreateEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotifierCreateEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NotifierCreateEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NotifierDescribeEvents 计费事件s 列表
*/
func (a *Client) NotifierDescribeEvents(params *NotifierDescribeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierDescribeEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifierDescribeEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifier_DescribeEvents",
		Method:             "GET",
		PathPattern:        "/v1/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NotifierDescribeEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotifierDescribeEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NotifierDescribeEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NotifierGetEmailServiceConfig ns b内部调用 查询邮件服务器配置信息
*/
func (a *Client) NotifierGetEmailServiceConfig(params *NotifierGetEmailServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierGetEmailServiceConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifierGetEmailServiceConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifier_GetEmailServiceConfig",
		Method:             "GET",
		PathPattern:        "/v1/emailserviceconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NotifierGetEmailServiceConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotifierGetEmailServiceConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NotifierGetEmailServiceConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NotifierSendMails ns b内部调用 发送邮件
*/
func (a *Client) NotifierSendMails(params *NotifierSendMailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierSendMailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifierSendMailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifier_SendMails",
		Method:             "POST",
		PathPattern:        "/v1/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NotifierSendMailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotifierSendMailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NotifierSendMailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NotifierSetEmailServiceConfig ns b内部调用 修改邮件服务器配置信息
*/
func (a *Client) NotifierSetEmailServiceConfig(params *NotifierSetEmailServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifierSetEmailServiceConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifierSetEmailServiceConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifier_SetEmailServiceConfig",
		Method:             "PATCH",
		PathPattern:        "/v1/emailserviceconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NotifierSetEmailServiceConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotifierSetEmailServiceConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NotifierSetEmailServiceConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
