// Code generated by go-swagger; DO NOT EDIT.

package notifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNotifierDescribeEventsParams creates a new NotifierDescribeEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNotifierDescribeEventsParams() *NotifierDescribeEventsParams {
	return &NotifierDescribeEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNotifierDescribeEventsParamsWithTimeout creates a new NotifierDescribeEventsParams object
// with the ability to set a timeout on a request.
func NewNotifierDescribeEventsParamsWithTimeout(timeout time.Duration) *NotifierDescribeEventsParams {
	return &NotifierDescribeEventsParams{
		timeout: timeout,
	}
}

// NewNotifierDescribeEventsParamsWithContext creates a new NotifierDescribeEventsParams object
// with the ability to set a context for a request.
func NewNotifierDescribeEventsParamsWithContext(ctx context.Context) *NotifierDescribeEventsParams {
	return &NotifierDescribeEventsParams{
		Context: ctx,
	}
}

// NewNotifierDescribeEventsParamsWithHTTPClient creates a new NotifierDescribeEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewNotifierDescribeEventsParamsWithHTTPClient(client *http.Client) *NotifierDescribeEventsParams {
	return &NotifierDescribeEventsParams{
		HTTPClient: client,
	}
}

/*
NotifierDescribeEventsParams contains all the parameters to send to the API endpoint

	for the notifier describe events operation.

	Typically these are written to a http.Request.
*/
type NotifierDescribeEventsParams struct {

	/* AccessSysID.

	   接入系统ID.
	*/
	AccessSysID *string

	/* CustomerID.

	   客户ID.
	*/
	CustomerID []string

	/* Event.

	   事件.
	*/
	Event []string

	/* EventID.

	   事件ID.
	*/
	EventID []string

	/* EventTime.

	   事件发生时间.

	   Format: date-time
	*/
	EventTime *strfmt.DateTime

	/* Limit.

	   数据库查询每页大小 - 默认 20, 最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Offset.

	   数据库查询偏移位置 - 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* ProdID.

	   产品ID.
	*/
	ProdID []string

	/* ProdInstIDExt.

	   外部产品实例ID.
	*/
	ProdInstIDExt []string

	/* Reverse.

	   是否倒序排序 - value = 0 sort ASC, value = 1 sort DESC.
	*/
	Reverse *bool

	/* SearchWord.

	   模糊查询关键字.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	/* Status.

	   事件状态.
	*/
	Status []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the notifier describe events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NotifierDescribeEventsParams) WithDefaults() *NotifierDescribeEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the notifier describe events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NotifierDescribeEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithTimeout(timeout time.Duration) *NotifierDescribeEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithContext(ctx context.Context) *NotifierDescribeEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithHTTPClient(client *http.Client) *NotifierDescribeEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessSysID adds the accessSysID to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithAccessSysID(accessSysID *string) *NotifierDescribeEventsParams {
	o.SetAccessSysID(accessSysID)
	return o
}

// SetAccessSysID adds the accessSysId to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetAccessSysID(accessSysID *string) {
	o.AccessSysID = accessSysID
}

// WithCustomerID adds the customerID to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithCustomerID(customerID []string) *NotifierDescribeEventsParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetCustomerID(customerID []string) {
	o.CustomerID = customerID
}

// WithEvent adds the event to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithEvent(event []string) *NotifierDescribeEventsParams {
	o.SetEvent(event)
	return o
}

// SetEvent adds the event to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetEvent(event []string) {
	o.Event = event
}

// WithEventID adds the eventID to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithEventID(eventID []string) *NotifierDescribeEventsParams {
	o.SetEventID(eventID)
	return o
}

// SetEventID adds the eventId to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetEventID(eventID []string) {
	o.EventID = eventID
}

// WithEventTime adds the eventTime to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithEventTime(eventTime *strfmt.DateTime) *NotifierDescribeEventsParams {
	o.SetEventTime(eventTime)
	return o
}

// SetEventTime adds the eventTime to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetEventTime(eventTime *strfmt.DateTime) {
	o.EventTime = eventTime
}

// WithLimit adds the limit to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithLimit(limit *string) *NotifierDescribeEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithOffset(offset *string) *NotifierDescribeEventsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithProdID adds the prodID to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithProdID(prodID []string) *NotifierDescribeEventsParams {
	o.SetProdID(prodID)
	return o
}

// SetProdID adds the prodId to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetProdID(prodID []string) {
	o.ProdID = prodID
}

// WithProdInstIDExt adds the prodInstIDExt to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithProdInstIDExt(prodInstIDExt []string) *NotifierDescribeEventsParams {
	o.SetProdInstIDExt(prodInstIDExt)
	return o
}

// SetProdInstIDExt adds the prodInstIdExt to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetProdInstIDExt(prodInstIDExt []string) {
	o.ProdInstIDExt = prodInstIDExt
}

// WithReverse adds the reverse to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithReverse(reverse *bool) *NotifierDescribeEventsParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithSearchWord(searchWord *string) *NotifierDescribeEventsParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithSortKey(sortKey *string) *NotifierDescribeEventsParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStatus adds the status to the notifier describe events params
func (o *NotifierDescribeEventsParams) WithStatus(status []string) *NotifierDescribeEventsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the notifier describe events params
func (o *NotifierDescribeEventsParams) SetStatus(status []string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *NotifierDescribeEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessSysID != nil {

		// query param access_sys_id
		var qrAccessSysID string

		if o.AccessSysID != nil {
			qrAccessSysID = *o.AccessSysID
		}
		qAccessSysID := qrAccessSysID
		if qAccessSysID != "" {

			if err := r.SetQueryParam("access_sys_id", qAccessSysID); err != nil {
				return err
			}
		}
	}

	if o.CustomerID != nil {

		// binding items for customer_id
		joinedCustomerID := o.bindParamCustomerID(reg)

		// query array param customer_id
		if err := r.SetQueryParam("customer_id", joinedCustomerID...); err != nil {
			return err
		}
	}

	if o.Event != nil {

		// binding items for event
		joinedEvent := o.bindParamEvent(reg)

		// query array param event
		if err := r.SetQueryParam("event", joinedEvent...); err != nil {
			return err
		}
	}

	if o.EventID != nil {

		// binding items for event_id
		joinedEventID := o.bindParamEventID(reg)

		// query array param event_id
		if err := r.SetQueryParam("event_id", joinedEventID...); err != nil {
			return err
		}
	}

	if o.EventTime != nil {

		// query param event_time
		var qrEventTime strfmt.DateTime

		if o.EventTime != nil {
			qrEventTime = *o.EventTime
		}
		qEventTime := qrEventTime.String()
		if qEventTime != "" {

			if err := r.SetQueryParam("event_time", qEventTime); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ProdID != nil {

		// binding items for prod_id
		joinedProdID := o.bindParamProdID(reg)

		// query array param prod_id
		if err := r.SetQueryParam("prod_id", joinedProdID...); err != nil {
			return err
		}
	}

	if o.ProdInstIDExt != nil {

		// binding items for prod_inst_id_ext
		joinedProdInstIDExt := o.bindParamProdInstIDExt(reg)

		// query array param prod_inst_id_ext
		if err := r.SetQueryParam("prod_inst_id_ext", joinedProdInstIDExt...); err != nil {
			return err
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// binding items for status
		joinedStatus := o.bindParamStatus(reg)

		// query array param status
		if err := r.SetQueryParam("status", joinedStatus...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNotifierDescribeEvents binds the parameter customer_id
func (o *NotifierDescribeEventsParams) bindParamCustomerID(formats strfmt.Registry) []string {
	customerIDIR := o.CustomerID

	var customerIDIC []string
	for _, customerIDIIR := range customerIDIR { // explode []string

		customerIDIIV := customerIDIIR // string as string
		customerIDIC = append(customerIDIC, customerIDIIV)
	}

	// items.CollectionFormat: "multi"
	customerIDIS := swag.JoinByFormat(customerIDIC, "multi")

	return customerIDIS
}

// bindParamNotifierDescribeEvents binds the parameter event
func (o *NotifierDescribeEventsParams) bindParamEvent(formats strfmt.Registry) []string {
	eventIR := o.Event

	var eventIC []string
	for _, eventIIR := range eventIR { // explode []string

		eventIIV := eventIIR // string as string
		eventIC = append(eventIC, eventIIV)
	}

	// items.CollectionFormat: "multi"
	eventIS := swag.JoinByFormat(eventIC, "multi")

	return eventIS
}

// bindParamNotifierDescribeEvents binds the parameter event_id
func (o *NotifierDescribeEventsParams) bindParamEventID(formats strfmt.Registry) []string {
	eventIDIR := o.EventID

	var eventIDIC []string
	for _, eventIDIIR := range eventIDIR { // explode []string

		eventIDIIV := eventIDIIR // string as string
		eventIDIC = append(eventIDIC, eventIDIIV)
	}

	// items.CollectionFormat: "multi"
	eventIDIS := swag.JoinByFormat(eventIDIC, "multi")

	return eventIDIS
}

// bindParamNotifierDescribeEvents binds the parameter prod_id
func (o *NotifierDescribeEventsParams) bindParamProdID(formats strfmt.Registry) []string {
	prodIDIR := o.ProdID

	var prodIDIC []string
	for _, prodIDIIR := range prodIDIR { // explode []string

		prodIDIIV := prodIDIIR // string as string
		prodIDIC = append(prodIDIC, prodIDIIV)
	}

	// items.CollectionFormat: "multi"
	prodIDIS := swag.JoinByFormat(prodIDIC, "multi")

	return prodIDIS
}

// bindParamNotifierDescribeEvents binds the parameter prod_inst_id_ext
func (o *NotifierDescribeEventsParams) bindParamProdInstIDExt(formats strfmt.Registry) []string {
	prodInstIDExtIR := o.ProdInstIDExt

	var prodInstIDExtIC []string
	for _, prodInstIDExtIIR := range prodInstIDExtIR { // explode []string

		prodInstIDExtIIV := prodInstIDExtIIR // string as string
		prodInstIDExtIC = append(prodInstIDExtIC, prodInstIDExtIIV)
	}

	// items.CollectionFormat: "multi"
	prodInstIDExtIS := swag.JoinByFormat(prodInstIDExtIC, "multi")

	return prodInstIDExtIS
}

// bindParamNotifierDescribeEvents binds the parameter status
func (o *NotifierDescribeEventsParams) bindParamStatus(formats strfmt.Registry) []string {
	statusIR := o.Status

	var statusIC []string
	for _, statusIIR := range statusIR { // explode []string

		statusIIV := statusIIR // string as string
		statusIC = append(statusIC, statusIIV)
	}

	// items.CollectionFormat: "multi"
	statusIS := swag.JoinByFormat(statusIC, "multi")

	return statusIS
}
