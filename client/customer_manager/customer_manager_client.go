// Code generated by go-swagger; DO NOT EDIT.

package customer_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CustomerManagerCreateCustomerCurrency(params *CustomerManagerCreateCustomerCurrencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerCreateCustomerCurrencyOK, error)

	CustomerManagerCreateOrUpdateCustomer(params *CustomerManagerCreateOrUpdateCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerCreateOrUpdateCustomerOK, error)

	CustomerManagerDescribeCustomerCurrencies(params *CustomerManagerDescribeCustomerCurrenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerDescribeCustomerCurrenciesOK, error)

	CustomerManagerDescribeCustomerResources(params *CustomerManagerDescribeCustomerResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerDescribeCustomerResourcesOK, error)

	CustomerManagerDescribeCustomerResourcesTrans(params *CustomerManagerDescribeCustomerResourcesTransParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerDescribeCustomerResourcesTransOK, error)

	CustomerManagerDescribeCustomers(params *CustomerManagerDescribeCustomersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerDescribeCustomersOK, error)

	CustomerManagerRefundCustomerResource(params *CustomerManagerRefundCustomerResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerRefundCustomerResourceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CustomerManagerCreateCustomerCurrency 赠送客户优惠券s
*/
func (a *Client) CustomerManagerCreateCustomerCurrency(params *CustomerManagerCreateCustomerCurrencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerCreateCustomerCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerManagerCreateCustomerCurrencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerManager_CreateCustomerCurrency",
		Method:             "POST",
		PathPattern:        "/v1/customer/currency/gift",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomerManagerCreateCustomerCurrencyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerManagerCreateCustomerCurrencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerManagerCreateCustomerCurrencyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerManagerCreateOrUpdateCustomer 客户s 创建或更新 批量
*/
func (a *Client) CustomerManagerCreateOrUpdateCustomer(params *CustomerManagerCreateOrUpdateCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerCreateOrUpdateCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerManagerCreateOrUpdateCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerManager_CreateOrUpdateCustomer",
		Method:             "POST",
		PathPattern:        "/v1/customers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomerManagerCreateOrUpdateCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerManagerCreateOrUpdateCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerManagerCreateOrUpdateCustomerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerManagerDescribeCustomerCurrencies 客户优惠券s 查询
*/
func (a *Client) CustomerManagerDescribeCustomerCurrencies(params *CustomerManagerDescribeCustomerCurrenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerDescribeCustomerCurrenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerManagerDescribeCustomerCurrenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerManager_DescribeCustomerCurrencies",
		Method:             "GET",
		PathPattern:        "/v1/customer/currency/gift",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomerManagerDescribeCustomerCurrenciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerManagerDescribeCustomerCurrenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerManagerDescribeCustomerCurrenciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerManagerDescribeCustomerResources 客户资源s 查询
*/
func (a *Client) CustomerManagerDescribeCustomerResources(params *CustomerManagerDescribeCustomerResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerDescribeCustomerResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerManagerDescribeCustomerResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerManager_DescribeCustomerResources",
		Method:             "GET",
		PathPattern:        "/v1/customer/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomerManagerDescribeCustomerResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerManagerDescribeCustomerResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerManagerDescribeCustomerResourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerManagerDescribeCustomerResourcesTrans 客户资源消费s 查询
*/
func (a *Client) CustomerManagerDescribeCustomerResourcesTrans(params *CustomerManagerDescribeCustomerResourcesTransParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerDescribeCustomerResourcesTransOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerManagerDescribeCustomerResourcesTransParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerManager_DescribeCustomerResourcesTrans",
		Method:             "GET",
		PathPattern:        "/v1/customer/resources/trans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomerManagerDescribeCustomerResourcesTransReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerManagerDescribeCustomerResourcesTransOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerManagerDescribeCustomerResourcesTransDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerManagerDescribeCustomers 客户s 查询
*/
func (a *Client) CustomerManagerDescribeCustomers(params *CustomerManagerDescribeCustomersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerDescribeCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerManagerDescribeCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerManager_DescribeCustomers",
		Method:             "GET",
		PathPattern:        "/v1/customers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomerManagerDescribeCustomersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerManagerDescribeCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerManagerDescribeCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerManagerRefundCustomerResource 客户资源包s 退费
*/
func (a *Client) CustomerManagerRefundCustomerResource(params *CustomerManagerRefundCustomerResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerManagerRefundCustomerResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerManagerRefundCustomerResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerManager_RefundCustomerResource",
		Method:             "POST",
		PathPattern:        "/v1/customer/resource/refund",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomerManagerRefundCustomerResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerManagerRefundCustomerResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerManagerRefundCustomerResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
