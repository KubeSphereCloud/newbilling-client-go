// Code generated by go-swagger; DO NOT EDIT.

package subscription_package_order_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSubscriptionPackageOrderManagerSearchPrdOrdersParams creates a new SubscriptionPackageOrderManagerSearchPrdOrdersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSubscriptionPackageOrderManagerSearchPrdOrdersParams() *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	return &SubscriptionPackageOrderManagerSearchPrdOrdersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSubscriptionPackageOrderManagerSearchPrdOrdersParamsWithTimeout creates a new SubscriptionPackageOrderManagerSearchPrdOrdersParams object
// with the ability to set a timeout on a request.
func NewSubscriptionPackageOrderManagerSearchPrdOrdersParamsWithTimeout(timeout time.Duration) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	return &SubscriptionPackageOrderManagerSearchPrdOrdersParams{
		timeout: timeout,
	}
}

// NewSubscriptionPackageOrderManagerSearchPrdOrdersParamsWithContext creates a new SubscriptionPackageOrderManagerSearchPrdOrdersParams object
// with the ability to set a context for a request.
func NewSubscriptionPackageOrderManagerSearchPrdOrdersParamsWithContext(ctx context.Context) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	return &SubscriptionPackageOrderManagerSearchPrdOrdersParams{
		Context: ctx,
	}
}

// NewSubscriptionPackageOrderManagerSearchPrdOrdersParamsWithHTTPClient creates a new SubscriptionPackageOrderManagerSearchPrdOrdersParams object
// with the ability to set a custom HTTPClient for a request.
func NewSubscriptionPackageOrderManagerSearchPrdOrdersParamsWithHTTPClient(client *http.Client) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	return &SubscriptionPackageOrderManagerSearchPrdOrdersParams{
		HTTPClient: client,
	}
}

/*
SubscriptionPackageOrderManagerSearchPrdOrdersParams contains all the parameters to send to the API endpoint

	for the subscription package order manager search prd orders operation.

	Typically these are written to a http.Request.
*/
type SubscriptionPackageOrderManagerSearchPrdOrdersParams struct {

	/* AccessSysID.

	   接入系统ID.
	*/
	AccessSysID *string

	/* Limit.

	   数据库查询分页大小- 默认 20，最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Offset.

	   数据库查询偏移位置- 默认 0.

	   Format: uint64
	*/
	Offset *string

	/* OrderID.

	   主订单ID.
	*/
	OrderID []string

	/* OrderStatus.

	   计费任务状态.
	*/
	OrderStatus *string

	/* OrderUserID.

	   用户ID.
	*/
	OrderUserID *string

	/* ProdCode.

	   产品code.
	*/
	ProdCode *string

	/* ProdName.

	   产品名称.
	*/
	ProdName *string

	/* Reverse.

	   是否倒序排序- 0：ASC，1：DESC.
	*/
	Reverse *bool

	/* SearchWord.

	   模糊查询关键字- 支持字段：无.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段 - 默认 create_time.
	*/
	SortKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the subscription package order manager search prd orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithDefaults() *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the subscription package order manager search prd orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithTimeout(timeout time.Duration) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithContext(ctx context.Context) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithHTTPClient(client *http.Client) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessSysID adds the accessSysID to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithAccessSysID(accessSysID *string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetAccessSysID(accessSysID)
	return o
}

// SetAccessSysID adds the accessSysId to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetAccessSysID(accessSysID *string) {
	o.AccessSysID = accessSysID
}

// WithLimit adds the limit to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithLimit(limit *string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithOffset(offset *string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithOrderID adds the orderID to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithOrderID(orderID []string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetOrderID(orderID []string) {
	o.OrderID = orderID
}

// WithOrderStatus adds the orderStatus to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithOrderStatus(orderStatus *string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetOrderStatus(orderStatus)
	return o
}

// SetOrderStatus adds the orderStatus to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetOrderStatus(orderStatus *string) {
	o.OrderStatus = orderStatus
}

// WithOrderUserID adds the orderUserID to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithOrderUserID(orderUserID *string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetOrderUserID(orderUserID)
	return o
}

// SetOrderUserID adds the orderUserId to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetOrderUserID(orderUserID *string) {
	o.OrderUserID = orderUserID
}

// WithProdCode adds the prodCode to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithProdCode(prodCode *string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetProdCode(prodCode)
	return o
}

// SetProdCode adds the prodCode to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetProdCode(prodCode *string) {
	o.ProdCode = prodCode
}

// WithProdName adds the prodName to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithProdName(prodName *string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetProdName(prodName)
	return o
}

// SetProdName adds the prodName to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetProdName(prodName *string) {
	o.ProdName = prodName
}

// WithReverse adds the reverse to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithReverse(reverse *bool) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithSearchWord(searchWord *string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WithSortKey(sortKey *string) *SubscriptionPackageOrderManagerSearchPrdOrdersParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the subscription package order manager search prd orders params
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WriteToRequest writes these params to a swagger request
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessSysID != nil {

		// query param access_sys_id
		var qrAccessSysID string

		if o.AccessSysID != nil {
			qrAccessSysID = *o.AccessSysID
		}
		qAccessSysID := qrAccessSysID
		if qAccessSysID != "" {

			if err := r.SetQueryParam("access_sys_id", qAccessSysID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrderID != nil {

		// binding items for order_id
		joinedOrderID := o.bindParamOrderID(reg)

		// query array param order_id
		if err := r.SetQueryParam("order_id", joinedOrderID...); err != nil {
			return err
		}
	}

	if o.OrderStatus != nil {

		// query param order_status
		var qrOrderStatus string

		if o.OrderStatus != nil {
			qrOrderStatus = *o.OrderStatus
		}
		qOrderStatus := qrOrderStatus
		if qOrderStatus != "" {

			if err := r.SetQueryParam("order_status", qOrderStatus); err != nil {
				return err
			}
		}
	}

	if o.OrderUserID != nil {

		// query param order_user_id
		var qrOrderUserID string

		if o.OrderUserID != nil {
			qrOrderUserID = *o.OrderUserID
		}
		qOrderUserID := qrOrderUserID
		if qOrderUserID != "" {

			if err := r.SetQueryParam("order_user_id", qOrderUserID); err != nil {
				return err
			}
		}
	}

	if o.ProdCode != nil {

		// query param prod_code
		var qrProdCode string

		if o.ProdCode != nil {
			qrProdCode = *o.ProdCode
		}
		qProdCode := qrProdCode
		if qProdCode != "" {

			if err := r.SetQueryParam("prod_code", qProdCode); err != nil {
				return err
			}
		}
	}

	if o.ProdName != nil {

		// query param prod_name
		var qrProdName string

		if o.ProdName != nil {
			qrProdName = *o.ProdName
		}
		qProdName := qrProdName
		if qProdName != "" {

			if err := r.SetQueryParam("prod_name", qProdName); err != nil {
				return err
			}
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSubscriptionPackageOrderManagerSearchPrdOrders binds the parameter order_id
func (o *SubscriptionPackageOrderManagerSearchPrdOrdersParams) bindParamOrderID(formats strfmt.Registry) []string {
	orderIDIR := o.OrderID

	var orderIDIC []string
	for _, orderIDIIR := range orderIDIR { // explode []string

		orderIDIIV := orderIDIIR // string as string
		orderIDIC = append(orderIDIC, orderIDIIV)
	}

	// items.CollectionFormat: "multi"
	orderIDIS := swag.JoinByFormat(orderIDIC, "multi")

	return orderIDIS
}
