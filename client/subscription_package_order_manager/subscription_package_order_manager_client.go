// Code generated by go-swagger; DO NOT EDIT.

package subscription_package_order_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subscription package order manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscription package order manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SubscriptionPackageOrderManagerCancelPrdOrder(params *SubscriptionPackageOrderManagerCancelPrdOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerCancelPrdOrderOK, error)

	SubscriptionPackageOrderManagerChargePrdOrder(params *SubscriptionPackageOrderManagerChargePrdOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerChargePrdOrderOK, error)

	SubscriptionPackageOrderManagerChargeResourcePackageOrder(params *SubscriptionPackageOrderManagerChargeResourcePackageOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerChargeResourcePackageOrderOK, error)

	SubscriptionPackageOrderManagerCreatePrdOrder(params *SubscriptionPackageOrderManagerCreatePrdOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerCreatePrdOrderOK, error)

	SubscriptionPackageOrderManagerCreatePrdOrderV2(params *SubscriptionPackageOrderManagerCreatePrdOrderV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerCreatePrdOrderV2OK, error)

	SubscriptionPackageOrderManagerCreateResourcePackageOrder(params *SubscriptionPackageOrderManagerCreateResourcePackageOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerCreateResourcePackageOrderOK, error)

	SubscriptionPackageOrderManagerGetPrdOrder(params *SubscriptionPackageOrderManagerGetPrdOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerGetPrdOrderOK, error)

	SubscriptionPackageOrderManagerSearchPrdOrders(params *SubscriptionPackageOrderManagerSearchPrdOrdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerSearchPrdOrdersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SubscriptionPackageOrderManagerCancelPrdOrder 取消主订单s
*/
func (a *Client) SubscriptionPackageOrderManagerCancelPrdOrder(params *SubscriptionPackageOrderManagerCancelPrdOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerCancelPrdOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionPackageOrderManagerCancelPrdOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionPackageOrderManager_CancelPrdOrder",
		Method:             "POST",
		PathPattern:        "/v1/packageorders/{order_id}:cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionPackageOrderManagerCancelPrdOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionPackageOrderManagerCancelPrdOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionPackageOrderManagerCancelPrdOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionPackageOrderManagerChargePrdOrder 支付主订单s
*/
func (a *Client) SubscriptionPackageOrderManagerChargePrdOrder(params *SubscriptionPackageOrderManagerChargePrdOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerChargePrdOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionPackageOrderManagerChargePrdOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionPackageOrderManager_ChargePrdOrder",
		Method:             "POST",
		PathPattern:        "/v1/packageorders/{order_id}:pay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionPackageOrderManagerChargePrdOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionPackageOrderManagerChargePrdOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionPackageOrderManagerChargePrdOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionPackageOrderManagerChargeResourcePackageOrder 支付购买资源包订单s
*/
func (a *Client) SubscriptionPackageOrderManagerChargeResourcePackageOrder(params *SubscriptionPackageOrderManagerChargeResourcePackageOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerChargeResourcePackageOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionPackageOrderManagerChargeResourcePackageOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionPackageOrderManager_ChargeResourcePackageOrder",
		Method:             "POST",
		PathPattern:        "/v1/resourcepackage/orders/{order_id}:pay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionPackageOrderManagerChargeResourcePackageOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionPackageOrderManagerChargeResourcePackageOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionPackageOrderManagerChargeResourcePackageOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionPackageOrderManagerCreatePrdOrder ds e p r e c a t e d 创建主订单 v1 1 主订单支持打包购买多种产品的多个实例
*/
func (a *Client) SubscriptionPackageOrderManagerCreatePrdOrder(params *SubscriptionPackageOrderManagerCreatePrdOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerCreatePrdOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionPackageOrderManagerCreatePrdOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionPackageOrderManager_CreatePrdOrder",
		Method:             "POST",
		PathPattern:        "/v1/packageorders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionPackageOrderManagerCreatePrdOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionPackageOrderManagerCreatePrdOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionPackageOrderManagerCreatePrdOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionPackageOrderManagerCreatePrdOrderV2 创建主订单s v1 2 主订单支持打包购买多种产品的多个实例
*/
func (a *Client) SubscriptionPackageOrderManagerCreatePrdOrderV2(params *SubscriptionPackageOrderManagerCreatePrdOrderV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerCreatePrdOrderV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionPackageOrderManagerCreatePrdOrderV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionPackageOrderManager_CreatePrdOrderV2",
		Method:             "POST",
		PathPattern:        "/v2/packageorders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionPackageOrderManagerCreatePrdOrderV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionPackageOrderManagerCreatePrdOrderV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionPackageOrderManagerCreatePrdOrderV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionPackageOrderManagerCreateResourcePackageOrder 购买资源包订单s
*/
func (a *Client) SubscriptionPackageOrderManagerCreateResourcePackageOrder(params *SubscriptionPackageOrderManagerCreateResourcePackageOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerCreateResourcePackageOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionPackageOrderManagerCreateResourcePackageOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionPackageOrderManager_CreateResourcePackageOrder",
		Method:             "POST",
		PathPattern:        "/v1/resourcepackage/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionPackageOrderManagerCreateResourcePackageOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionPackageOrderManagerCreateResourcePackageOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionPackageOrderManagerCreateResourcePackageOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionPackageOrderManagerGetPrdOrder 查询主订单详情s
*/
func (a *Client) SubscriptionPackageOrderManagerGetPrdOrder(params *SubscriptionPackageOrderManagerGetPrdOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerGetPrdOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionPackageOrderManagerGetPrdOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionPackageOrderManager_GetPrdOrder",
		Method:             "GET",
		PathPattern:        "/v1/packageorders/{order_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionPackageOrderManagerGetPrdOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionPackageOrderManagerGetPrdOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionPackageOrderManagerGetPrdOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionPackageOrderManagerSearchPrdOrders 查询主订单列表s
*/
func (a *Client) SubscriptionPackageOrderManagerSearchPrdOrders(params *SubscriptionPackageOrderManagerSearchPrdOrdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionPackageOrderManagerSearchPrdOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionPackageOrderManagerSearchPrdOrdersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionPackageOrderManager_SearchPrdOrders",
		Method:             "GET",
		PathPattern:        "/v1/packageorders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionPackageOrderManagerSearchPrdOrdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionPackageOrderManagerSearchPrdOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionPackageOrderManagerSearchPrdOrdersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
