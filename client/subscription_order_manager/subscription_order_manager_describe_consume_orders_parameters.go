// Code generated by go-swagger; DO NOT EDIT.

package subscription_order_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSubscriptionOrderManagerDescribeConsumeOrdersParams creates a new SubscriptionOrderManagerDescribeConsumeOrdersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSubscriptionOrderManagerDescribeConsumeOrdersParams() *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	return &SubscriptionOrderManagerDescribeConsumeOrdersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSubscriptionOrderManagerDescribeConsumeOrdersParamsWithTimeout creates a new SubscriptionOrderManagerDescribeConsumeOrdersParams object
// with the ability to set a timeout on a request.
func NewSubscriptionOrderManagerDescribeConsumeOrdersParamsWithTimeout(timeout time.Duration) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	return &SubscriptionOrderManagerDescribeConsumeOrdersParams{
		timeout: timeout,
	}
}

// NewSubscriptionOrderManagerDescribeConsumeOrdersParamsWithContext creates a new SubscriptionOrderManagerDescribeConsumeOrdersParams object
// with the ability to set a context for a request.
func NewSubscriptionOrderManagerDescribeConsumeOrdersParamsWithContext(ctx context.Context) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	return &SubscriptionOrderManagerDescribeConsumeOrdersParams{
		Context: ctx,
	}
}

// NewSubscriptionOrderManagerDescribeConsumeOrdersParamsWithHTTPClient creates a new SubscriptionOrderManagerDescribeConsumeOrdersParams object
// with the ability to set a custom HTTPClient for a request.
func NewSubscriptionOrderManagerDescribeConsumeOrdersParamsWithHTTPClient(client *http.Client) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	return &SubscriptionOrderManagerDescribeConsumeOrdersParams{
		HTTPClient: client,
	}
}

/*
SubscriptionOrderManagerDescribeConsumeOrdersParams contains all the parameters to send to the API endpoint

	for the subscription order manager describe consume orders operation.

	Typically these are written to a http.Request.
*/
type SubscriptionOrderManagerDescribeConsumeOrdersParams struct {

	// ChargeStatus.
	ChargeStatus []string

	// ChargeTime.
	//
	// Format: date-time
	ChargeTime *strfmt.DateTime

	// ConsumeType.
	ConsumeType []string

	// CreateTimeMax.
	//
	// Format: date-time
	CreateTimeMax *strfmt.DateTime

	// CreateTimeMin.
	//
	// Format: date-time
	CreateTimeMin *strfmt.DateTime

	/* Limit.

	   数据库查询分页大小- 默认 20，最大值 200.

	   Format: uint64
	*/
	Limit *string

	/* Offset.

	   数据库查询偏移位置- 默认 0.

	   Format: uint64
	*/
	Offset *string

	// ProdInstConsumeOrderID.
	ProdInstConsumeOrderID []string

	// ProdName.
	ProdName *string

	/* Reverse.

	   是否倒序排序- 0：ASC，1：DESC.
	*/
	Reverse *bool

	/* SearchWord.

	   模糊查询关键字- 支持字段：order_user_id/order_user_name.
	*/
	SearchWord *string

	/* SortKey.

	   排序字段- 默认 create_time.
	*/
	SortKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the subscription order manager describe consume orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithDefaults() *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the subscription order manager describe consume orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithTimeout(timeout time.Duration) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithContext(ctx context.Context) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithHTTPClient(client *http.Client) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChargeStatus adds the chargeStatus to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithChargeStatus(chargeStatus []string) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetChargeStatus(chargeStatus)
	return o
}

// SetChargeStatus adds the chargeStatus to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetChargeStatus(chargeStatus []string) {
	o.ChargeStatus = chargeStatus
}

// WithChargeTime adds the chargeTime to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithChargeTime(chargeTime *strfmt.DateTime) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetChargeTime(chargeTime)
	return o
}

// SetChargeTime adds the chargeTime to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetChargeTime(chargeTime *strfmt.DateTime) {
	o.ChargeTime = chargeTime
}

// WithConsumeType adds the consumeType to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithConsumeType(consumeType []string) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetConsumeType(consumeType)
	return o
}

// SetConsumeType adds the consumeType to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetConsumeType(consumeType []string) {
	o.ConsumeType = consumeType
}

// WithCreateTimeMax adds the createTimeMax to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithCreateTimeMax(createTimeMax *strfmt.DateTime) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetCreateTimeMax(createTimeMax)
	return o
}

// SetCreateTimeMax adds the createTimeMax to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetCreateTimeMax(createTimeMax *strfmt.DateTime) {
	o.CreateTimeMax = createTimeMax
}

// WithCreateTimeMin adds the createTimeMin to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithCreateTimeMin(createTimeMin *strfmt.DateTime) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetCreateTimeMin(createTimeMin)
	return o
}

// SetCreateTimeMin adds the createTimeMin to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetCreateTimeMin(createTimeMin *strfmt.DateTime) {
	o.CreateTimeMin = createTimeMin
}

// WithLimit adds the limit to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithLimit(limit *string) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithOffset(offset *string) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithProdInstConsumeOrderID adds the prodInstConsumeOrderID to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithProdInstConsumeOrderID(prodInstConsumeOrderID []string) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetProdInstConsumeOrderID(prodInstConsumeOrderID)
	return o
}

// SetProdInstConsumeOrderID adds the prodInstConsumeOrderId to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetProdInstConsumeOrderID(prodInstConsumeOrderID []string) {
	o.ProdInstConsumeOrderID = prodInstConsumeOrderID
}

// WithProdName adds the prodName to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithProdName(prodName *string) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetProdName(prodName)
	return o
}

// SetProdName adds the prodName to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetProdName(prodName *string) {
	o.ProdName = prodName
}

// WithReverse adds the reverse to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithReverse(reverse *bool) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithSearchWord(searchWord *string) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WithSortKey(sortKey *string) *SubscriptionOrderManagerDescribeConsumeOrdersParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the subscription order manager describe consume orders params
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WriteToRequest writes these params to a swagger request
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChargeStatus != nil {

		// binding items for charge_status
		joinedChargeStatus := o.bindParamChargeStatus(reg)

		// query array param charge_status
		if err := r.SetQueryParam("charge_status", joinedChargeStatus...); err != nil {
			return err
		}
	}

	if o.ChargeTime != nil {

		// query param charge_time
		var qrChargeTime strfmt.DateTime

		if o.ChargeTime != nil {
			qrChargeTime = *o.ChargeTime
		}
		qChargeTime := qrChargeTime.String()
		if qChargeTime != "" {

			if err := r.SetQueryParam("charge_time", qChargeTime); err != nil {
				return err
			}
		}
	}

	if o.ConsumeType != nil {

		// binding items for consume_type
		joinedConsumeType := o.bindParamConsumeType(reg)

		// query array param consume_type
		if err := r.SetQueryParam("consume_type", joinedConsumeType...); err != nil {
			return err
		}
	}

	if o.CreateTimeMax != nil {

		// query param create_time_max
		var qrCreateTimeMax strfmt.DateTime

		if o.CreateTimeMax != nil {
			qrCreateTimeMax = *o.CreateTimeMax
		}
		qCreateTimeMax := qrCreateTimeMax.String()
		if qCreateTimeMax != "" {

			if err := r.SetQueryParam("create_time_max", qCreateTimeMax); err != nil {
				return err
			}
		}
	}

	if o.CreateTimeMin != nil {

		// query param create_time_min
		var qrCreateTimeMin strfmt.DateTime

		if o.CreateTimeMin != nil {
			qrCreateTimeMin = *o.CreateTimeMin
		}
		qCreateTimeMin := qrCreateTimeMin.String()
		if qCreateTimeMin != "" {

			if err := r.SetQueryParam("create_time_min", qCreateTimeMin); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ProdInstConsumeOrderID != nil {

		// binding items for prod_inst_consume_order_id
		joinedProdInstConsumeOrderID := o.bindParamProdInstConsumeOrderID(reg)

		// query array param prod_inst_consume_order_id
		if err := r.SetQueryParam("prod_inst_consume_order_id", joinedProdInstConsumeOrderID...); err != nil {
			return err
		}
	}

	if o.ProdName != nil {

		// query param prod_name
		var qrProdName string

		if o.ProdName != nil {
			qrProdName = *o.ProdName
		}
		qProdName := qrProdName
		if qProdName != "" {

			if err := r.SetQueryParam("prod_name", qProdName); err != nil {
				return err
			}
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string

		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {

			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}
	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string

		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {

			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSubscriptionOrderManagerDescribeConsumeOrders binds the parameter charge_status
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) bindParamChargeStatus(formats strfmt.Registry) []string {
	chargeStatusIR := o.ChargeStatus

	var chargeStatusIC []string
	for _, chargeStatusIIR := range chargeStatusIR { // explode []string

		chargeStatusIIV := chargeStatusIIR // string as string
		chargeStatusIC = append(chargeStatusIC, chargeStatusIIV)
	}

	// items.CollectionFormat: "multi"
	chargeStatusIS := swag.JoinByFormat(chargeStatusIC, "multi")

	return chargeStatusIS
}

// bindParamSubscriptionOrderManagerDescribeConsumeOrders binds the parameter consume_type
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) bindParamConsumeType(formats strfmt.Registry) []string {
	consumeTypeIR := o.ConsumeType

	var consumeTypeIC []string
	for _, consumeTypeIIR := range consumeTypeIR { // explode []string

		consumeTypeIIV := consumeTypeIIR // string as string
		consumeTypeIC = append(consumeTypeIC, consumeTypeIIV)
	}

	// items.CollectionFormat: "multi"
	consumeTypeIS := swag.JoinByFormat(consumeTypeIC, "multi")

	return consumeTypeIS
}

// bindParamSubscriptionOrderManagerDescribeConsumeOrders binds the parameter prod_inst_consume_order_id
func (o *SubscriptionOrderManagerDescribeConsumeOrdersParams) bindParamProdInstConsumeOrderID(formats strfmt.Registry) []string {
	prodInstConsumeOrderIDIR := o.ProdInstConsumeOrderID

	var prodInstConsumeOrderIDIC []string
	for _, prodInstConsumeOrderIDIIR := range prodInstConsumeOrderIDIR { // explode []string

		prodInstConsumeOrderIDIIV := prodInstConsumeOrderIDIIR // string as string
		prodInstConsumeOrderIDIC = append(prodInstConsumeOrderIDIC, prodInstConsumeOrderIDIIV)
	}

	// items.CollectionFormat: "multi"
	prodInstConsumeOrderIDIS := swag.JoinByFormat(prodInstConsumeOrderIDIC, "multi")

	return prodInstConsumeOrderIDIS
}
