// Code generated by go-swagger; DO NOT EDIT.

package discount_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new discount manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for discount manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DiscountManagerCalculateCustomerDiscount(params *DiscountManagerCalculateCustomerDiscountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerCalculateCustomerDiscountOK, error)

	DiscountManagerCreateCustomerDiscount(params *DiscountManagerCreateCustomerDiscountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerCreateCustomerDiscountOK, error)

	DiscountManagerDeleteCustomerDiscounts(params *DiscountManagerDeleteCustomerDiscountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerDeleteCustomerDiscountsOK, error)

	DiscountManagerDescribeCustomerDiscounts(params *DiscountManagerDescribeCustomerDiscountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerDescribeCustomerDiscountsOK, error)

	DiscountManagerGetCustomerDiscount(params *DiscountManagerGetCustomerDiscountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerGetCustomerDiscountOK, error)

	DiscountManagerModifyCustomerDiscount(params *DiscountManagerModifyCustomerDiscountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerModifyCustomerDiscountOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DiscountManagerCalculateCustomerDiscount 计算折扣s
*/
func (a *Client) DiscountManagerCalculateCustomerDiscount(params *DiscountManagerCalculateCustomerDiscountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerCalculateCustomerDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountManagerCalculateCustomerDiscountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountManager_CalculateCustomerDiscount",
		Method:             "POST",
		PathPattern:        "/v1/customerdiscounts:calculate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DiscountManagerCalculateCustomerDiscountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountManagerCalculateCustomerDiscountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiscountManagerCalculateCustomerDiscountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DiscountManagerCreateCustomerDiscount 创建客户折扣s
*/
func (a *Client) DiscountManagerCreateCustomerDiscount(params *DiscountManagerCreateCustomerDiscountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerCreateCustomerDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountManagerCreateCustomerDiscountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountManager_CreateCustomerDiscount",
		Method:             "POST",
		PathPattern:        "/v1/customerdiscounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DiscountManagerCreateCustomerDiscountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountManagerCreateCustomerDiscountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiscountManagerCreateCustomerDiscountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DiscountManagerDeleteCustomerDiscounts 删除客户折扣s
*/
func (a *Client) DiscountManagerDeleteCustomerDiscounts(params *DiscountManagerDeleteCustomerDiscountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerDeleteCustomerDiscountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountManagerDeleteCustomerDiscountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountManager_DeleteCustomerDiscounts",
		Method:             "DELETE",
		PathPattern:        "/v1/customerdiscounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DiscountManagerDeleteCustomerDiscountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountManagerDeleteCustomerDiscountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiscountManagerDeleteCustomerDiscountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DiscountManagerDescribeCustomerDiscounts 查询客户折扣列表s
*/
func (a *Client) DiscountManagerDescribeCustomerDiscounts(params *DiscountManagerDescribeCustomerDiscountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerDescribeCustomerDiscountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountManagerDescribeCustomerDiscountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountManager_DescribeCustomerDiscounts",
		Method:             "GET",
		PathPattern:        "/v1/customerdiscounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DiscountManagerDescribeCustomerDiscountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountManagerDescribeCustomerDiscountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiscountManagerDescribeCustomerDiscountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DiscountManagerGetCustomerDiscount 查询单个客户折扣信息s
*/
func (a *Client) DiscountManagerGetCustomerDiscount(params *DiscountManagerGetCustomerDiscountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerGetCustomerDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountManagerGetCustomerDiscountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountManager_GetCustomerDiscount",
		Method:             "GET",
		PathPattern:        "/v1/customerdiscounts/{customer_discount_id}:query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DiscountManagerGetCustomerDiscountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountManagerGetCustomerDiscountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiscountManagerGetCustomerDiscountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DiscountManagerModifyCustomerDiscount 修改客户折扣s
*/
func (a *Client) DiscountManagerModifyCustomerDiscount(params *DiscountManagerModifyCustomerDiscountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DiscountManagerModifyCustomerDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscountManagerModifyCustomerDiscountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DiscountManager_ModifyCustomerDiscount",
		Method:             "PATCH",
		PathPattern:        "/v1/customerdiscounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DiscountManagerModifyCustomerDiscountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscountManagerModifyCustomerDiscountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiscountManagerModifyCustomerDiscountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
