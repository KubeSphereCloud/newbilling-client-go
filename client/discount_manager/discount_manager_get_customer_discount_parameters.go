// Code generated by go-swagger; DO NOT EDIT.

package discount_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDiscountManagerGetCustomerDiscountParams creates a new DiscountManagerGetCustomerDiscountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDiscountManagerGetCustomerDiscountParams() *DiscountManagerGetCustomerDiscountParams {
	return &DiscountManagerGetCustomerDiscountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDiscountManagerGetCustomerDiscountParamsWithTimeout creates a new DiscountManagerGetCustomerDiscountParams object
// with the ability to set a timeout on a request.
func NewDiscountManagerGetCustomerDiscountParamsWithTimeout(timeout time.Duration) *DiscountManagerGetCustomerDiscountParams {
	return &DiscountManagerGetCustomerDiscountParams{
		timeout: timeout,
	}
}

// NewDiscountManagerGetCustomerDiscountParamsWithContext creates a new DiscountManagerGetCustomerDiscountParams object
// with the ability to set a context for a request.
func NewDiscountManagerGetCustomerDiscountParamsWithContext(ctx context.Context) *DiscountManagerGetCustomerDiscountParams {
	return &DiscountManagerGetCustomerDiscountParams{
		Context: ctx,
	}
}

// NewDiscountManagerGetCustomerDiscountParamsWithHTTPClient creates a new DiscountManagerGetCustomerDiscountParams object
// with the ability to set a custom HTTPClient for a request.
func NewDiscountManagerGetCustomerDiscountParamsWithHTTPClient(client *http.Client) *DiscountManagerGetCustomerDiscountParams {
	return &DiscountManagerGetCustomerDiscountParams{
		HTTPClient: client,
	}
}

/*
DiscountManagerGetCustomerDiscountParams contains all the parameters to send to the API endpoint

	for the discount manager get customer discount operation.

	Typically these are written to a http.Request.
*/
type DiscountManagerGetCustomerDiscountParams struct {

	/* CustomerDiscountID.

	   客户折扣ID
	*/
	CustomerDiscountID string

	/* ProdID.

	   产品ID.
	*/
	ProdID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the discount manager get customer discount params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DiscountManagerGetCustomerDiscountParams) WithDefaults() *DiscountManagerGetCustomerDiscountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the discount manager get customer discount params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DiscountManagerGetCustomerDiscountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) WithTimeout(timeout time.Duration) *DiscountManagerGetCustomerDiscountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) WithContext(ctx context.Context) *DiscountManagerGetCustomerDiscountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) WithHTTPClient(client *http.Client) *DiscountManagerGetCustomerDiscountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerDiscountID adds the customerDiscountID to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) WithCustomerDiscountID(customerDiscountID string) *DiscountManagerGetCustomerDiscountParams {
	o.SetCustomerDiscountID(customerDiscountID)
	return o
}

// SetCustomerDiscountID adds the customerDiscountId to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) SetCustomerDiscountID(customerDiscountID string) {
	o.CustomerDiscountID = customerDiscountID
}

// WithProdID adds the prodID to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) WithProdID(prodID *string) *DiscountManagerGetCustomerDiscountParams {
	o.SetProdID(prodID)
	return o
}

// SetProdID adds the prodId to the discount manager get customer discount params
func (o *DiscountManagerGetCustomerDiscountParams) SetProdID(prodID *string) {
	o.ProdID = prodID
}

// WriteToRequest writes these params to a swagger request
func (o *DiscountManagerGetCustomerDiscountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param customer_discount_id
	if err := r.SetPathParam("customer_discount_id", o.CustomerDiscountID); err != nil {
		return err
	}

	if o.ProdID != nil {

		// query param prod_id
		var qrProdID string

		if o.ProdID != nil {
			qrProdID = *o.ProdID
		}
		qProdID := qrProdID
		if qProdID != "" {

			if err := r.SetQueryParam("prod_id", qProdID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
