// Code generated by go-swagger; DO NOT EDIT.

package subscription_prod_instance_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subscription prod instance manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscription prod instance manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SubscriptionProdInstanceManagerChangeProdInstanceConfig(params *SubscriptionProdInstanceManagerChangeProdInstanceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerChangeProdInstanceConfigOK, error)

	SubscriptionProdInstanceManagerChangeProdInstanceConfigV2(params *SubscriptionProdInstanceManagerChangeProdInstanceConfigV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerChangeProdInstanceConfigV2OK, error)

	SubscriptionProdInstanceManagerDescribeProdInstances(params *SubscriptionProdInstanceManagerDescribeProdInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerDescribeProdInstancesOK, error)

	SubscriptionProdInstanceManagerGetProdInstance(params *SubscriptionProdInstanceManagerGetProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerGetProdInstanceOK, error)

	SubscriptionProdInstanceManagerPatchProdInstance(params *SubscriptionProdInstanceManagerPatchProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerPatchProdInstanceOK, error)

	SubscriptionProdInstanceManagerPauseProdInstance(params *SubscriptionProdInstanceManagerPauseProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerPauseProdInstanceOK, error)

	SubscriptionProdInstanceManagerRecoverProdInstance(params *SubscriptionProdInstanceManagerRecoverProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerRecoverProdInstanceOK, error)

	SubscriptionProdInstanceManagerRenewProdInstance(params *SubscriptionProdInstanceManagerRenewProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerRenewProdInstanceOK, error)

	SubscriptionProdInstanceManagerRenewProdInstanceV2(params *SubscriptionProdInstanceManagerRenewProdInstanceV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerRenewProdInstanceV2OK, error)

	SubscriptionProdInstanceManagerResumeProdInstance(params *SubscriptionProdInstanceManagerResumeProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerResumeProdInstanceOK, error)

	SubscriptionProdInstanceManagerStopProdInstance(params *SubscriptionProdInstanceManagerStopProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerStopProdInstanceOK, error)

	SubscriptionProdInstanceManagerTransferCompToTimePackage(params *SubscriptionProdInstanceManagerTransferCompToTimePackageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerTransferCompToTimePackageOK, error)

	SubscriptionProdInstanceManagerTransferCompToUsageTime(params *SubscriptionProdInstanceManagerTransferCompToUsageTimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerTransferCompToUsageTimeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SubscriptionProdInstanceManagerChangeProdInstanceConfig 改配s 更改单个产品实例配置
*/
func (a *Client) SubscriptionProdInstanceManagerChangeProdInstanceConfig(params *SubscriptionProdInstanceManagerChangeProdInstanceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerChangeProdInstanceConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerChangeProdInstanceConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_ChangeProdInstanceConfig",
		Method:             "POST",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}:reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerChangeProdInstanceConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerChangeProdInstanceConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerChangeProdInstanceConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerChangeProdInstanceConfigV2 改配s 更改单个产品实例配置
*/
func (a *Client) SubscriptionProdInstanceManagerChangeProdInstanceConfigV2(params *SubscriptionProdInstanceManagerChangeProdInstanceConfigV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerChangeProdInstanceConfigV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerChangeProdInstanceConfigV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_ChangeProdInstanceConfigV2",
		Method:             "POST",
		PathPattern:        "/v2/prodinstances/{prod_inst_id_ext}:reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerChangeProdInstanceConfigV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerChangeProdInstanceConfigV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerChangeProdInstanceConfigV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerDescribeProdInstances 查询产品实例列表s 前端查询使用
*/
func (a *Client) SubscriptionProdInstanceManagerDescribeProdInstances(params *SubscriptionProdInstanceManagerDescribeProdInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerDescribeProdInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerDescribeProdInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_DescribeProdInstances",
		Method:             "GET",
		PathPattern:        "/v1/prodinstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerDescribeProdInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerDescribeProdInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerDescribeProdInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerGetProdInstance 查询单个产品实例s 给外部接入系统查询单个产品实例详细信息使用
*/
func (a *Client) SubscriptionProdInstanceManagerGetProdInstance(params *SubscriptionProdInstanceManagerGetProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerGetProdInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerGetProdInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_GetProdInstance",
		Method:             "GET",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}:query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerGetProdInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerGetProdInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerGetProdInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerPatchProdInstance 更新产品实例的信息s
*/
func (a *Client) SubscriptionProdInstanceManagerPatchProdInstance(params *SubscriptionProdInstanceManagerPatchProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerPatchProdInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerPatchProdInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_PatchProdInstance",
		Method:             "PATCH",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerPatchProdInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerPatchProdInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerPatchProdInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerPauseProdInstance 通用接口s 暂停单个产品实例计费
*/
func (a *Client) SubscriptionProdInstanceManagerPauseProdInstance(params *SubscriptionProdInstanceManagerPauseProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerPauseProdInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerPauseProdInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_PauseProdInstance",
		Method:             "POST",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}:pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerPauseProdInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerPauseProdInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerPauseProdInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerRecoverProdInstance 充值后恢复s 欠费后充值 恢复单个产品实例计费
*/
func (a *Client) SubscriptionProdInstanceManagerRecoverProdInstance(params *SubscriptionProdInstanceManagerRecoverProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerRecoverProdInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerRecoverProdInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_RecoverProdInstance",
		Method:             "POST",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}:recoverfromoverdue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerRecoverProdInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerRecoverProdInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerRecoverProdInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerRenewProdInstance 续订s 续订单个产品实例
*/
func (a *Client) SubscriptionProdInstanceManagerRenewProdInstance(params *SubscriptionProdInstanceManagerRenewProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerRenewProdInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerRenewProdInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_RenewProdInstance",
		Method:             "POST",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}:renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerRenewProdInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerRenewProdInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerRenewProdInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerRenewProdInstanceV2 续订s 续订单个产品实例
*/
func (a *Client) SubscriptionProdInstanceManagerRenewProdInstanceV2(params *SubscriptionProdInstanceManagerRenewProdInstanceV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerRenewProdInstanceV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerRenewProdInstanceV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_RenewProdInstanceV2",
		Method:             "POST",
		PathPattern:        "/v2/prodinstances/{prod_inst_id_ext}:renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerRenewProdInstanceV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerRenewProdInstanceV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerRenewProdInstanceV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerResumeProdInstance 通用接口s 恢复单个产品实例计费
*/
func (a *Client) SubscriptionProdInstanceManagerResumeProdInstance(params *SubscriptionProdInstanceManagerResumeProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerResumeProdInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerResumeProdInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_ResumeProdInstance",
		Method:             "POST",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}:resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerResumeProdInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerResumeProdInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerResumeProdInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerStopProdInstance 停止s 停止单个产品实例计费
*/
func (a *Client) SubscriptionProdInstanceManagerStopProdInstance(params *SubscriptionProdInstanceManagerStopProdInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerStopProdInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerStopProdInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_StopProdInstance",
		Method:             "POST",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}:stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerStopProdInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerStopProdInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerStopProdInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerTransferCompToTimePackage 计费模式转换1s 将产品实例中的按时间量的计费项转为按时间包的计费项
*/
func (a *Client) SubscriptionProdInstanceManagerTransferCompToTimePackage(params *SubscriptionProdInstanceManagerTransferCompToTimePackageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerTransferCompToTimePackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerTransferCompToTimePackageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_TransferCompToTimePackage",
		Method:             "POST",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}:transfer2timepackage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerTransferCompToTimePackageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerTransferCompToTimePackageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerTransferCompToTimePackageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SubscriptionProdInstanceManagerTransferCompToUsageTime 计费模式转换2s 将产品实例中的按时间包的计费项转为按时间量的计费项
*/
func (a *Client) SubscriptionProdInstanceManagerTransferCompToUsageTime(params *SubscriptionProdInstanceManagerTransferCompToUsageTimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubscriptionProdInstanceManagerTransferCompToUsageTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionProdInstanceManagerTransferCompToUsageTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubscriptionProdInstanceManager_TransferCompToUsageTime",
		Method:             "POST",
		PathPattern:        "/v1/prodinstances/{prod_inst_id_ext}:transfer2usagetime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscriptionProdInstanceManagerTransferCompToUsageTimeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionProdInstanceManagerTransferCompToUsageTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SubscriptionProdInstanceManagerTransferCompToUsageTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
